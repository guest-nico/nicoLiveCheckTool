// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: checkin.proto
/*
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from checkin.proto</summary>

public static partial class CheckinReflection {

  #region Descriptor
  /// <summary>File descriptor for checkin.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static CheckinReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg1jaGVja2luLnByb3RvIpEMCg5DaGVja2luUmVxdWVzdBIMCgRpbWVpGAEg",
          "ASgJEhEKCWFuZHJvaWRJZBgCIAEoAxIOCgZkaWdlc3QYAyABKAkSKAoHY2hl",
          "Y2tpbhgEIAEoCzIXLkNoZWNraW5SZXF1ZXN0LkNoZWNraW4SFAoMZGVzaXJl",
          "ZEJ1aWxkGAUgASgJEg4KBmxvY2FsZRgGIAEoCRIRCglsb2dnaW5nSWQYByAB",
          "KAMSFQoNbWFya2V0Q2hlY2tpbhgIIAEoCRISCgptYWNBZGRyZXNzGAkgAygJ",
          "EgwKBG1laWQYCiABKAkSFQoNYWNjb3VudENvb2tpZRgLIAMoCRIQCgh0aW1l",
          "Wm9uZRgMIAEoCRIVCg1zZWN1cml0eVRva2VuGA0gASgGEg8KB3ZlcnNpb24Y",
          "DiABKAUSDwoHb3RhQ2VydBgPIAMoCRIOCgZzZXJpYWwYECABKAkSCwoDZXNu",
          "GBEgASgJEjkKE2RldmljZUNvbmZpZ3VyYXRpb24YEiABKAsyHC5DaGVja2lu",
          "UmVxdWVzdC5EZXZpY2VDb25maWcSFgoObWFjQWRkcmVzc1R5cGUYEyADKAkS",
          "EAoIZnJhZ21lbnQYFCABKAUSEAoIdXNlck5hbWUYFSABKAkSGAoQdXNlclNl",
          "cmlhbE51bWJlchgWIAEoBRqPBQoHQ2hlY2tpbhIsCgVidWlsZBgBIAEoCzId",
          "LkNoZWNraW5SZXF1ZXN0LkNoZWNraW4uQnVpbGQSFQoNbGFzdENoZWNraW5N",
          "cxgCIAEoAxIsCgVldmVudBgDIAMoCzIdLkNoZWNraW5SZXF1ZXN0LkNoZWNr",
          "aW4uRXZlbnQSLwoEc3RhdBgEIAMoCzIhLkNoZWNraW5SZXF1ZXN0LkNoZWNr",
          "aW4uU3RhdGlzdGljEhYKDnJlcXVlc3RlZEdyb3VwGAUgAygJEhQKDGNlbGxP",
          "cGVyYXRvchgGIAEoCRITCgtzaW1PcGVyYXRvchgHIAEoCRIPCgdyb2FtaW5n",
          "GAggASgJEhIKCnVzZXJOdW1iZXIYCSABKAUajAIKBUJ1aWxkEhMKC2Zpbmdl",
          "cnByaW50GAEgASgJEhAKCGhhcmR3YXJlGAIgASgJEg0KBWJyYW5kGAMgASgJ",
          "Eg0KBXJhZGlvGAQgASgJEhIKCmJvb3Rsb2FkZXIYBSABKAkSEAoIY2xpZW50",
          "SWQYBiABKAkSDAoEdGltZRgHIAEoAxIaChJwYWNrYWdlVmVyc2lvbkNvZGUY",
          "CCABKAUSDgoGZGV2aWNlGAkgASgJEhIKCnNka1ZlcnNpb24YCiABKAUSDQoF",
          "bW9kZWwYCyABKAkSFAoMbWFudWZhY3R1cmVyGAwgASgJEg8KB3Byb2R1Y3QY",
          "DSABKAkSFAoMb3RhSW5zdGFsbGVkGA4gASgIGjMKBUV2ZW50EgsKA3RhZxgB",
          "IAEoCRINCgV2YWx1ZRgCIAEoCRIOCgZ0aW1lTXMYAyABKAMaNAoJU3RhdGlz",
          "dGljEgsKA3RhZxgBIAEoCRINCgVjb3VudBgCIAEoBRILCgNzdW0YAyABKAIa",
          "jwMKDERldmljZUNvbmZpZxITCgt0b3VjaFNjcmVlbhgBIAEoBRIUCgxrZXli",
          "b2FyZFR5cGUYAiABKAUSEgoKbmF2aWdhdGlvbhgDIAEoBRIUCgxzY3JlZW5M",
          "YXlvdXQYBCABKAUSFwoPaGFzSGFyZEtleWJvYXJkGAUgASgIEhwKFGhhc0Zp",
          "dmVXYXlOYXZpZ2F0aW9uGAYgASgIEhIKCmRlbnNpdHlEcGkYByABKAUSEwoL",
          "Z2xFc1ZlcnNpb24YCCABKAUSFQoNc2hhcmVkTGlicmFyeRgJIAMoCRIYChBh",
          "dmFpbGFibGVGZWF0dXJlGAogAygJEhYKDm5hdGl2ZVBsYXRmb3JtGAsgAygJ",
          "EhMKC3dpZHRoUGl4ZWxzGAwgASgFEhQKDGhlaWdodFBpeGVscxgNIAEoBRIO",
          "CgZsb2NhbGUYDiADKAkSEwoLZ2xFeHRlbnNpb24YDyADKAkSEwoLZGV2aWNl",
          "Q2xhc3MYECABKAUSHAoUbWF4QXBrRG93bmxvYWRTaXplTWIYESABKAUikgQK",
          "D0NoZWNraW5SZXNwb25zZRIPCgdzdGF0c09rGAEgASgIEicKBmludGVudBgC",
          "IAMoCzIXLkNoZWNraW5SZXNwb25zZS5JbnRlbnQSDgoGdGltZU1zGAMgASgD",
          "Eg4KBmRpZ2VzdBgEIAEoCRIyCgdzZXR0aW5nGAUgAygLMiEuQ2hlY2tpblJl",
          "c3BvbnNlLkdzZXJ2aWNlc1NldHRpbmcSEAoIbWFya2V0T2sYBiABKAgSEQoJ",
          "YW5kcm9pZElkGAcgASgGEhUKDXNlY3VyaXR5VG9rZW4YCCABKAYSFAoMc2V0",
          "dGluZ3NEaWZmGAkgASgIEhUKDWRlbGV0ZVNldHRpbmcYCiADKAkSEwoLdmVy",
          "c2lvbkluZm8YCyABKAkSHQoVZGV2aWNlRGF0YVZlcnNpb25JbmZvGAwgASgJ",
          "GqIBCgZJbnRlbnQSDgoGYWN0aW9uGAEgASgJEg8KB2RhdGFVcmkYAiABKAkS",
          "EAoIbWltZVR5cGUYAyABKAkSEQoJamF2YUNsYXNzGAQgASgJEiwKBWV4dHJh",
          "GAUgAygLMh0uQ2hlY2tpblJlc3BvbnNlLkludGVudC5FeHRyYRokCgVFeHRy",
          "YRIMCgRuYW1lGAYgASgJEg0KBXZhbHVlGAcgASgJGi8KEEdzZXJ2aWNlc1Nl",
          "dHRpbmcSDAoEbmFtZRgBIAEoDBINCgV2YWx1ZRgCIAEoDEImChZvcmcubWlj",
          "cm9nLmdtcy5jaGVja2luQgxDaGVja2luUHJvdG9iBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::CheckinRequest), global::CheckinRequest.Parser, new[]{ "Imei", "AndroidId", "Digest", "Checkin", "DesiredBuild", "Locale", "LoggingId", "MarketCheckin", "MacAddress", "Meid", "AccountCookie", "TimeZone", "SecurityToken", "Version", "OtaCert", "Serial", "Esn", "DeviceConfiguration", "MacAddressType", "Fragment", "UserName", "UserSerialNumber" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CheckinRequest.Types.Checkin), global::CheckinRequest.Types.Checkin.Parser, new[]{ "Build", "LastCheckinMs", "Event", "Stat", "RequestedGroup", "CellOperator", "SimOperator", "Roaming", "UserNumber" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CheckinRequest.Types.Checkin.Types.Build), global::CheckinRequest.Types.Checkin.Types.Build.Parser, new[]{ "Fingerprint", "Hardware", "Brand", "Radio", "Bootloader", "ClientId", "Time", "PackageVersionCode", "Device", "SdkVersion", "Model", "Manufacturer", "Product", "OtaInstalled" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CheckinRequest.Types.Checkin.Types.Event), global::CheckinRequest.Types.Checkin.Types.Event.Parser, new[]{ "Tag", "Value", "TimeMs" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CheckinRequest.Types.Checkin.Types.Statistic), global::CheckinRequest.Types.Checkin.Types.Statistic.Parser, new[]{ "Tag", "Count", "Sum" }, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CheckinRequest.Types.DeviceConfig), global::CheckinRequest.Types.DeviceConfig.Parser, new[]{ "TouchScreen", "KeyboardType", "Navigation", "ScreenLayout", "HasHardKeyboard", "HasFiveWayNavigation", "DensityDpi", "GlEsVersion", "SharedLibrary", "AvailableFeature", "NativePlatform", "WidthPixels", "HeightPixels", "Locale", "GlExtension", "DeviceClass", "MaxApkDownloadSizeMb" }, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CheckinResponse), global::CheckinResponse.Parser, new[]{ "StatsOk", "Intent", "TimeMs", "Digest", "Setting", "MarketOk", "AndroidId", "SecurityToken", "SettingsDiff", "DeleteSetting", "VersionInfo", "DeviceDataVersionInfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CheckinResponse.Types.Intent), global::CheckinResponse.Types.Intent.Parser, new[]{ "Action", "DataUri", "MimeType", "JavaClass", "Extra" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CheckinResponse.Types.Intent.Types.Extra), global::CheckinResponse.Types.Intent.Types.Extra.Parser, new[]{ "Name", "Value" }, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CheckinResponse.Types.GservicesSetting), global::CheckinResponse.Types.GservicesSetting.Parser, new[]{ "Name", "Value" }, null, null, null)})
        }));
  }
  #endregion

}
#region Messages
/// <summary>
/// Sample data, if provided, is fished from a Nexus 7 (2013) / flo running Android 5.0
/// </summary>
public sealed partial class CheckinRequest : pb::IMessage<CheckinRequest> {
  private static readonly pb::MessageParser<CheckinRequest> _parser = new pb::MessageParser<CheckinRequest>(() => new CheckinRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CheckinRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CheckinReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CheckinRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CheckinRequest(CheckinRequest other) : this() {
    imei_ = other.imei_;
    androidId_ = other.androidId_;
    digest_ = other.digest_;
    Checkin = other.checkin_ != null ? other.Checkin.Clone() : null;
    desiredBuild_ = other.desiredBuild_;
    locale_ = other.locale_;
    loggingId_ = other.loggingId_;
    marketCheckin_ = other.marketCheckin_;
    macAddress_ = other.macAddress_.Clone();
    meid_ = other.meid_;
    accountCookie_ = other.accountCookie_.Clone();
    timeZone_ = other.timeZone_;
    securityToken_ = other.securityToken_;
    version_ = other.version_;
    otaCert_ = other.otaCert_.Clone();
    serial_ = other.serial_;
    esn_ = other.esn_;
    DeviceConfiguration = other.deviceConfiguration_ != null ? other.DeviceConfiguration.Clone() : null;
    macAddressType_ = other.macAddressType_.Clone();
    fragment_ = other.fragment_;
    userName_ = other.userName_;
    userSerialNumber_ = other.userSerialNumber_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CheckinRequest Clone() {
    return new CheckinRequest(this);
  }

  /// <summary>Field number for the "imei" field.</summary>
  public const int ImeiFieldNumber = 1;
  private string imei_ = "";
  /// <summary>
  /// unused
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Imei {
    get { return imei_; }
    set {
      imei_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "androidId" field.</summary>
  public const int AndroidIdFieldNumber = 2;
  private long androidId_;
  /// <summary>
  /// Gservices["android_id"] or 0 on first-checkin
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long AndroidId {
    get { return androidId_; }
    set {
      androidId_ = value;
    }
  }

  /// <summary>Field number for the "digest" field.</summary>
  public const int DigestFieldNumber = 3;
  private string digest_ = "";
  /// <summary>
  /// Gservices["digest"] or ""
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Digest {
    get { return digest_; }
    set {
      digest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "checkin" field.</summary>
  public const int CheckinFieldNumber = 4;
  private global::CheckinRequest.Types.Checkin checkin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CheckinRequest.Types.Checkin Checkin {
    get { return checkin_; }
    set {
      checkin_ = value;
    }
  }

  /// <summary>Field number for the "desiredBuild" field.</summary>
  public const int DesiredBuildFieldNumber = 5;
  private string desiredBuild_ = "";
  /// <summary>
  /// unused
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DesiredBuild {
    get { return desiredBuild_; }
    set {
      desiredBuild_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "locale" field.</summary>
  public const int LocaleFieldNumber = 6;
  private string locale_ = "";
  /// <summary>
  /// Locale.toString
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Locale {
    get { return locale_; }
    set {
      locale_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "loggingId" field.</summary>
  public const int LoggingIdFieldNumber = 7;
  private long loggingId_;
  /// <summary>
  /// GoogleSettingsContract.Partner["logging_id2"] (choosen randomly on first checkin)
  /// eg. 12561488293572742346
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LoggingId {
    get { return loggingId_; }
    set {
      loggingId_ = value;
    }
  }

  /// <summary>Field number for the "marketCheckin" field.</summary>
  public const int MarketCheckinFieldNumber = 8;
  private string marketCheckin_ = "";
  /// <summary>
  /// unused
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MarketCheckin {
    get { return marketCheckin_; }
    set {
      marketCheckin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "macAddress" field.</summary>
  public const int MacAddressFieldNumber = 9;
  private static readonly pb::FieldCodec<string> _repeated_macAddress_codec
      = pb::FieldCodec.ForString(74);
  private readonly pbc::RepeatedField<string> macAddress_ = new pbc::RepeatedField<string>();
  /// <summary>
  /// NetworkInfo.getExtraInfo, WifiInfo.getMacAddress (12 hex-digits)
  /// eg. d850e6abcdef
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> MacAddress {
    get { return macAddress_; }
  }

  /// <summary>Field number for the "meid" field.</summary>
  public const int MeidFieldNumber = 10;
  private string meid_ = "";
  /// <summary>
  /// TelephonyManager.getDeviceId (14 hex-digits), not set on tablets
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Meid {
    get { return meid_; }
    set {
      meid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "accountCookie" field.</summary>
  public const int AccountCookieFieldNumber = 11;
  private static readonly pb::FieldCodec<string> _repeated_accountCookie_codec
      = pb::FieldCodec.ForString(90);
  private readonly pbc::RepeatedField<string> accountCookie_ = new pbc::RepeatedField<string>();
  /// <summary>
  /// "[&lt;email>]" followed by "&lt;authToken>", empty string on first checkin
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> AccountCookie {
    get { return accountCookie_; }
  }

  /// <summary>Field number for the "timeZone" field.</summary>
  public const int TimeZoneFieldNumber = 12;
  private string timeZone_ = "";
  /// <summary>
  /// TimeZone.getId
  /// eg. GMT
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TimeZone {
    get { return timeZone_; }
    set {
      timeZone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "securityToken" field.</summary>
  public const int SecurityTokenFieldNumber = 13;
  private ulong securityToken_;
  /// <summary>
  /// security token as given on first checkin, not set on first checkin
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong SecurityToken {
    get { return securityToken_; }
    set {
      securityToken_ = value;
    }
  }

  /// <summary>Field number for the "version" field.</summary>
  public const int VersionFieldNumber = 14;
  private int version_;
  /// <summary>
  /// use 3
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Version {
    get { return version_; }
    set {
      version_ = value;
    }
  }

  /// <summary>Field number for the "otaCert" field.</summary>
  public const int OtaCertFieldNumber = 15;
  private static readonly pb::FieldCodec<string> _repeated_otaCert_codec
      = pb::FieldCodec.ForString(122);
  private readonly pbc::RepeatedField<string> otaCert_ = new pbc::RepeatedField<string>();
  /// <summary>
  /// SHA-1 of each in /system/etc/security/otacerts.zip or "--IOException--" or "--no-output--"
  /// eg. dKXTm1QH9QShGQwBM/4rg6/lCNQ=
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> OtaCert {
    get { return otaCert_; }
  }

  /// <summary>Field number for the "serial" field.</summary>
  public const int SerialFieldNumber = 16;
  private string serial_ = "";
  /// <summary>
  /// Build.SERIAL != "unknown"
  /// eg. 07d90b18
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Serial {
    get { return serial_; }
    set {
      serial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "esn" field.</summary>
  public const int EsnFieldNumber = 17;
  private string esn_ = "";
  /// <summary>
  /// TelephonyManager.getDeviceId (8 hex-digits), not set on tablets
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Esn {
    get { return esn_; }
    set {
      esn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceConfiguration" field.</summary>
  public const int DeviceConfigurationFieldNumber = 18;
  private global::CheckinRequest.Types.DeviceConfig deviceConfiguration_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CheckinRequest.Types.DeviceConfig DeviceConfiguration {
    get { return deviceConfiguration_; }
    set {
      deviceConfiguration_ = value;
    }
  }

  /// <summary>Field number for the "macAddressType" field.</summary>
  public const int MacAddressTypeFieldNumber = 19;
  private static readonly pb::FieldCodec<string> _repeated_macAddressType_codec
      = pb::FieldCodec.ForString(154);
  private readonly pbc::RepeatedField<string> macAddressType_ = new pbc::RepeatedField<string>();
  /// <summary>
  /// "ethernet" or "wifi"
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> MacAddressType {
    get { return macAddressType_; }
  }

  /// <summary>Field number for the "fragment" field.</summary>
  public const int FragmentFieldNumber = 20;
  private int fragment_;
  /// <summary>
  /// unknown, use 0 on pre- and first-checkin, and 1 for later checkins
  /// also present on pre-checkin
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Fragment {
    get { return fragment_; }
    set {
      fragment_ = value;
    }
  }

  /// <summary>Field number for the "userName" field.</summary>
  public const int UserNameFieldNumber = 21;
  private string userName_ = "";
  /// <summary>
  /// unknown
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string UserName {
    get { return userName_; }
    set {
      userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "userSerialNumber" field.</summary>
  public const int UserSerialNumberFieldNumber = 22;
  private int userSerialNumber_;
  /// <summary>
  /// UserManager.getUserSerialNumber
  /// eg. 0
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserSerialNumber {
    get { return userSerialNumber_; }
    set {
      userSerialNumber_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CheckinRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CheckinRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Imei != other.Imei) return false;
    if (AndroidId != other.AndroidId) return false;
    if (Digest != other.Digest) return false;
    if (!object.Equals(Checkin, other.Checkin)) return false;
    if (DesiredBuild != other.DesiredBuild) return false;
    if (Locale != other.Locale) return false;
    if (LoggingId != other.LoggingId) return false;
    if (MarketCheckin != other.MarketCheckin) return false;
    if(!macAddress_.Equals(other.macAddress_)) return false;
    if (Meid != other.Meid) return false;
    if(!accountCookie_.Equals(other.accountCookie_)) return false;
    if (TimeZone != other.TimeZone) return false;
    if (SecurityToken != other.SecurityToken) return false;
    if (Version != other.Version) return false;
    if(!otaCert_.Equals(other.otaCert_)) return false;
    if (Serial != other.Serial) return false;
    if (Esn != other.Esn) return false;
    if (!object.Equals(DeviceConfiguration, other.DeviceConfiguration)) return false;
    if(!macAddressType_.Equals(other.macAddressType_)) return false;
    if (Fragment != other.Fragment) return false;
    if (UserName != other.UserName) return false;
    if (UserSerialNumber != other.UserSerialNumber) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Imei.Length != 0) hash ^= Imei.GetHashCode();
    if (AndroidId != 0L) hash ^= AndroidId.GetHashCode();
    if (Digest.Length != 0) hash ^= Digest.GetHashCode();
    if (checkin_ != null) hash ^= Checkin.GetHashCode();
    if (DesiredBuild.Length != 0) hash ^= DesiredBuild.GetHashCode();
    if (Locale.Length != 0) hash ^= Locale.GetHashCode();
    if (LoggingId != 0L) hash ^= LoggingId.GetHashCode();
    if (MarketCheckin.Length != 0) hash ^= MarketCheckin.GetHashCode();
    hash ^= macAddress_.GetHashCode();
    if (Meid.Length != 0) hash ^= Meid.GetHashCode();
    hash ^= accountCookie_.GetHashCode();
    if (TimeZone.Length != 0) hash ^= TimeZone.GetHashCode();
    if (SecurityToken != 0UL) hash ^= SecurityToken.GetHashCode();
    if (Version != 0) hash ^= Version.GetHashCode();
    hash ^= otaCert_.GetHashCode();
    if (Serial.Length != 0) hash ^= Serial.GetHashCode();
    if (Esn.Length != 0) hash ^= Esn.GetHashCode();
    if (deviceConfiguration_ != null) hash ^= DeviceConfiguration.GetHashCode();
    hash ^= macAddressType_.GetHashCode();
    if (Fragment != 0) hash ^= Fragment.GetHashCode();
    if (UserName.Length != 0) hash ^= UserName.GetHashCode();
    if (UserSerialNumber != 0) hash ^= UserSerialNumber.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Imei.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Imei);
    }
    if (AndroidId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(AndroidId);
    }
    if (Digest.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Digest);
    }
    if (checkin_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Checkin);
    }
    if (DesiredBuild.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(DesiredBuild);
    }
    if (Locale.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Locale);
    }
    if (LoggingId != 0L) {
      output.WriteRawTag(56);
      output.WriteInt64(LoggingId);
    }
    if (MarketCheckin.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(MarketCheckin);
    }
    macAddress_.WriteTo(output, _repeated_macAddress_codec);
    if (Meid.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(Meid);
    }
    accountCookie_.WriteTo(output, _repeated_accountCookie_codec);
    if (TimeZone.Length != 0) {
      output.WriteRawTag(98);
      output.WriteString(TimeZone);
    }
    if (SecurityToken != 0UL) {
      output.WriteRawTag(105);
      output.WriteFixed64(SecurityToken);
    }
    if (Version != 0) {
      output.WriteRawTag(112);
      output.WriteInt32(Version);
    }
    otaCert_.WriteTo(output, _repeated_otaCert_codec);
    if (Serial.Length != 0) {
      output.WriteRawTag(130, 1);
      output.WriteString(Serial);
    }
    if (Esn.Length != 0) {
      output.WriteRawTag(138, 1);
      output.WriteString(Esn);
    }
    if (deviceConfiguration_ != null) {
      output.WriteRawTag(146, 1);
      output.WriteMessage(DeviceConfiguration);
    }
    macAddressType_.WriteTo(output, _repeated_macAddressType_codec);
    if (Fragment != 0) {
      output.WriteRawTag(160, 1);
      output.WriteInt32(Fragment);
    }
    if (UserName.Length != 0) {
      output.WriteRawTag(170, 1);
      output.WriteString(UserName);
    }
    if (UserSerialNumber != 0) {
      output.WriteRawTag(176, 1);
      output.WriteInt32(UserSerialNumber);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Imei.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Imei);
    }
    if (AndroidId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(AndroidId);
    }
    if (Digest.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Digest);
    }
    if (checkin_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Checkin);
    }
    if (DesiredBuild.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DesiredBuild);
    }
    if (Locale.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Locale);
    }
    if (LoggingId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LoggingId);
    }
    if (MarketCheckin.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MarketCheckin);
    }
    size += macAddress_.CalculateSize(_repeated_macAddress_codec);
    if (Meid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Meid);
    }
    size += accountCookie_.CalculateSize(_repeated_accountCookie_codec);
    if (TimeZone.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TimeZone);
    }
    if (SecurityToken != 0UL) {
      size += 1 + 8;
    }
    if (Version != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
    }
    size += otaCert_.CalculateSize(_repeated_otaCert_codec);
    if (Serial.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Serial);
    }
    if (Esn.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Esn);
    }
    if (deviceConfiguration_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DeviceConfiguration);
    }
    size += macAddressType_.CalculateSize(_repeated_macAddressType_codec);
    if (Fragment != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(Fragment);
    }
    if (UserName.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(UserName);
    }
    if (UserSerialNumber != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(UserSerialNumber);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CheckinRequest other) {
    if (other == null) {
      return;
    }
    if (other.Imei.Length != 0) {
      Imei = other.Imei;
    }
    if (other.AndroidId != 0L) {
      AndroidId = other.AndroidId;
    }
    if (other.Digest.Length != 0) {
      Digest = other.Digest;
    }
    if (other.checkin_ != null) {
      if (checkin_ == null) {
        checkin_ = new global::CheckinRequest.Types.Checkin();
      }
      Checkin.MergeFrom(other.Checkin);
    }
    if (other.DesiredBuild.Length != 0) {
      DesiredBuild = other.DesiredBuild;
    }
    if (other.Locale.Length != 0) {
      Locale = other.Locale;
    }
    if (other.LoggingId != 0L) {
      LoggingId = other.LoggingId;
    }
    if (other.MarketCheckin.Length != 0) {
      MarketCheckin = other.MarketCheckin;
    }
    macAddress_.Add(other.macAddress_);
    if (other.Meid.Length != 0) {
      Meid = other.Meid;
    }
    accountCookie_.Add(other.accountCookie_);
    if (other.TimeZone.Length != 0) {
      TimeZone = other.TimeZone;
    }
    if (other.SecurityToken != 0UL) {
      SecurityToken = other.SecurityToken;
    }
    if (other.Version != 0) {
      Version = other.Version;
    }
    otaCert_.Add(other.otaCert_);
    if (other.Serial.Length != 0) {
      Serial = other.Serial;
    }
    if (other.Esn.Length != 0) {
      Esn = other.Esn;
    }
    if (other.deviceConfiguration_ != null) {
      if (deviceConfiguration_ == null) {
        deviceConfiguration_ = new global::CheckinRequest.Types.DeviceConfig();
      }
      DeviceConfiguration.MergeFrom(other.DeviceConfiguration);
    }
    macAddressType_.Add(other.macAddressType_);
    if (other.Fragment != 0) {
      Fragment = other.Fragment;
    }
    if (other.UserName.Length != 0) {
      UserName = other.UserName;
    }
    if (other.UserSerialNumber != 0) {
      UserSerialNumber = other.UserSerialNumber;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Imei = input.ReadString();
          break;
        }
        case 16: {
          AndroidId = input.ReadInt64();
          break;
        }
        case 26: {
          Digest = input.ReadString();
          break;
        }
        case 34: {
          if (checkin_ == null) {
            checkin_ = new global::CheckinRequest.Types.Checkin();
          }
          input.ReadMessage(checkin_);
          break;
        }
        case 42: {
          DesiredBuild = input.ReadString();
          break;
        }
        case 50: {
          Locale = input.ReadString();
          break;
        }
        case 56: {
          LoggingId = input.ReadInt64();
          break;
        }
        case 66: {
          MarketCheckin = input.ReadString();
          break;
        }
        case 74: {
          macAddress_.AddEntriesFrom(input, _repeated_macAddress_codec);
          break;
        }
        case 82: {
          Meid = input.ReadString();
          break;
        }
        case 90: {
          accountCookie_.AddEntriesFrom(input, _repeated_accountCookie_codec);
          break;
        }
        case 98: {
          TimeZone = input.ReadString();
          break;
        }
        case 105: {
          SecurityToken = input.ReadFixed64();
          break;
        }
        case 112: {
          Version = input.ReadInt32();
          break;
        }
        case 122: {
          otaCert_.AddEntriesFrom(input, _repeated_otaCert_codec);
          break;
        }
        case 130: {
          Serial = input.ReadString();
          break;
        }
        case 138: {
          Esn = input.ReadString();
          break;
        }
        case 146: {
          if (deviceConfiguration_ == null) {
            deviceConfiguration_ = new global::CheckinRequest.Types.DeviceConfig();
          }
          input.ReadMessage(deviceConfiguration_);
          break;
        }
        case 154: {
          macAddressType_.AddEntriesFrom(input, _repeated_macAddressType_codec);
          break;
        }
        case 160: {
          Fragment = input.ReadInt32();
          break;
        }
        case 170: {
          UserName = input.ReadString();
          break;
        }
        case 176: {
          UserSerialNumber = input.ReadInt32();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the CheckinRequest message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class Checkin : pb::IMessage<Checkin> {
      private static readonly pb::MessageParser<Checkin> _parser = new pb::MessageParser<Checkin>(() => new Checkin());
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Checkin> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CheckinRequest.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Checkin() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Checkin(Checkin other) : this() {
        Build = other.build_ != null ? other.Build.Clone() : null;
        lastCheckinMs_ = other.lastCheckinMs_;
        event_ = other.event_.Clone();
        stat_ = other.stat_.Clone();
        requestedGroup_ = other.requestedGroup_.Clone();
        cellOperator_ = other.cellOperator_;
        simOperator_ = other.simOperator_;
        roaming_ = other.roaming_;
        userNumber_ = other.userNumber_;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Checkin Clone() {
        return new Checkin(this);
      }

      /// <summary>Field number for the "build" field.</summary>
      public const int BuildFieldNumber = 1;
      private global::CheckinRequest.Types.Checkin.Types.Build build_;
      /// <summary>
      /// empty Build on pre-checkin
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::CheckinRequest.Types.Checkin.Types.Build Build {
        get { return build_; }
        set {
          build_ = value;
        }
      }

      /// <summary>Field number for the "lastCheckinMs" field.</summary>
      public const int LastCheckinMsFieldNumber = 2;
      private long lastCheckinMs_;
      /// <summary>
      /// last checkin ms or 0 if first checkin
      /// eg. 0
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public long LastCheckinMs {
        get { return lastCheckinMs_; }
        set {
          lastCheckinMs_ = value;
        }
      }

      /// <summary>Field number for the "event" field.</summary>
      public const int EventFieldNumber = 3;
      private static readonly pb::FieldCodec<global::CheckinRequest.Types.Checkin.Types.Event> _repeated_event_codec
          = pb::FieldCodec.ForMessage(26, global::CheckinRequest.Types.Checkin.Types.Event.Parser);
      private readonly pbc::RepeatedField<global::CheckinRequest.Types.Checkin.Types.Event> event_ = new pbc::RepeatedField<global::CheckinRequest.Types.Checkin.Types.Event>();
      /// <summary>
      /// eg. ("event_log_start",~,1424612602652) on first checkin
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::CheckinRequest.Types.Checkin.Types.Event> Event {
        get { return event_; }
      }

      /// <summary>Field number for the "stat" field.</summary>
      public const int StatFieldNumber = 4;
      private static readonly pb::FieldCodec<global::CheckinRequest.Types.Checkin.Types.Statistic> _repeated_stat_codec
          = pb::FieldCodec.ForMessage(34, global::CheckinRequest.Types.Checkin.Types.Statistic.Parser);
      private readonly pbc::RepeatedField<global::CheckinRequest.Types.Checkin.Types.Statistic> stat_ = new pbc::RepeatedField<global::CheckinRequest.Types.Checkin.Types.Statistic>();
      /// <summary>
      /// unknown, n/a on first checkin
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::CheckinRequest.Types.Checkin.Types.Statistic> Stat {
        get { return stat_; }
      }

      /// <summary>Field number for the "requestedGroup" field.</summary>
      public const int RequestedGroupFieldNumber = 5;
      private static readonly pb::FieldCodec<string> _repeated_requestedGroup_codec
          = pb::FieldCodec.ForString(42);
      private readonly pbc::RepeatedField<string> requestedGroup_ = new pbc::RepeatedField<string>();
      /// <summary>
      /// unused
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<string> RequestedGroup {
        get { return requestedGroup_; }
      }

      /// <summary>Field number for the "cellOperator" field.</summary>
      public const int CellOperatorFieldNumber = 6;
      private string cellOperator_ = "";
      /// <summary>
      /// TelephonyManager.getNetworkOperator != null|empty
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string CellOperator {
        get { return cellOperator_; }
        set {
          cellOperator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "simOperator" field.</summary>
      public const int SimOperatorFieldNumber = 7;
      private string simOperator_ = "";
      /// <summary>
      /// TelephonyManager.getSimOperator != null|empty
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string SimOperator {
        get { return simOperator_; }
        set {
          simOperator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "roaming" field.</summary>
      public const int RoamingFieldNumber = 8;
      private string roaming_ = "";
      /// <summary>
      /// "WIFI::" | ("mobile" | "notmobile" | "unknown") + "-" + ("roaming" | "notroaming" | "unknown")
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Roaming {
        get { return roaming_; }
        set {
          roaming_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "userNumber" field.</summary>
      public const int UserNumberFieldNumber = 9;
      private int userNumber_;
      /// <summary>
      /// UserHandle.myUserId
      /// eg. 0
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int UserNumber {
        get { return userNumber_; }
        set {
          userNumber_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Checkin);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Checkin other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (!object.Equals(Build, other.Build)) return false;
        if (LastCheckinMs != other.LastCheckinMs) return false;
        if(!event_.Equals(other.event_)) return false;
        if(!stat_.Equals(other.stat_)) return false;
        if(!requestedGroup_.Equals(other.requestedGroup_)) return false;
        if (CellOperator != other.CellOperator) return false;
        if (SimOperator != other.SimOperator) return false;
        if (Roaming != other.Roaming) return false;
        if (UserNumber != other.UserNumber) return false;
        return true;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (build_ != null) hash ^= Build.GetHashCode();
        if (LastCheckinMs != 0L) hash ^= LastCheckinMs.GetHashCode();
        hash ^= event_.GetHashCode();
        hash ^= stat_.GetHashCode();
        hash ^= requestedGroup_.GetHashCode();
        if (CellOperator.Length != 0) hash ^= CellOperator.GetHashCode();
        if (SimOperator.Length != 0) hash ^= SimOperator.GetHashCode();
        if (Roaming.Length != 0) hash ^= Roaming.GetHashCode();
        if (UserNumber != 0) hash ^= UserNumber.GetHashCode();
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (build_ != null) {
          output.WriteRawTag(10);
          output.WriteMessage(Build);
        }
        if (LastCheckinMs != 0L) {
          output.WriteRawTag(16);
          output.WriteInt64(LastCheckinMs);
        }
        event_.WriteTo(output, _repeated_event_codec);
        stat_.WriteTo(output, _repeated_stat_codec);
        requestedGroup_.WriteTo(output, _repeated_requestedGroup_codec);
        if (CellOperator.Length != 0) {
          output.WriteRawTag(50);
          output.WriteString(CellOperator);
        }
        if (SimOperator.Length != 0) {
          output.WriteRawTag(58);
          output.WriteString(SimOperator);
        }
        if (Roaming.Length != 0) {
          output.WriteRawTag(66);
          output.WriteString(Roaming);
        }
        if (UserNumber != 0) {
          output.WriteRawTag(72);
          output.WriteInt32(UserNumber);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (build_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(Build);
        }
        if (LastCheckinMs != 0L) {
          size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastCheckinMs);
        }
        size += event_.CalculateSize(_repeated_event_codec);
        size += stat_.CalculateSize(_repeated_stat_codec);
        size += requestedGroup_.CalculateSize(_repeated_requestedGroup_codec);
        if (CellOperator.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(CellOperator);
        }
        if (SimOperator.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(SimOperator);
        }
        if (Roaming.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Roaming);
        }
        if (UserNumber != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserNumber);
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Checkin other) {
        if (other == null) {
          return;
        }
        if (other.build_ != null) {
          if (build_ == null) {
            build_ = new global::CheckinRequest.Types.Checkin.Types.Build();
          }
          Build.MergeFrom(other.Build);
        }
        if (other.LastCheckinMs != 0L) {
          LastCheckinMs = other.LastCheckinMs;
        }
        event_.Add(other.event_);
        stat_.Add(other.stat_);
        requestedGroup_.Add(other.requestedGroup_);
        if (other.CellOperator.Length != 0) {
          CellOperator = other.CellOperator;
        }
        if (other.SimOperator.Length != 0) {
          SimOperator = other.SimOperator;
        }
        if (other.Roaming.Length != 0) {
          Roaming = other.Roaming;
        }
        if (other.UserNumber != 0) {
          UserNumber = other.UserNumber;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 10: {
              if (build_ == null) {
                build_ = new global::CheckinRequest.Types.Checkin.Types.Build();
              }
              input.ReadMessage(build_);
              break;
            }
            case 16: {
              LastCheckinMs = input.ReadInt64();
              break;
            }
            case 26: {
              event_.AddEntriesFrom(input, _repeated_event_codec);
              break;
            }
            case 34: {
              stat_.AddEntriesFrom(input, _repeated_stat_codec);
              break;
            }
            case 42: {
              requestedGroup_.AddEntriesFrom(input, _repeated_requestedGroup_codec);
              break;
            }
            case 50: {
              CellOperator = input.ReadString();
              break;
            }
            case 58: {
              SimOperator = input.ReadString();
              break;
            }
            case 66: {
              Roaming = input.ReadString();
              break;
            }
            case 72: {
              UserNumber = input.ReadInt32();
              break;
            }
          }
        }
      }

      #region Nested types
      /// <summary>Container for nested types declared in the Checkin message type.</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static partial class Types {
        public sealed partial class Build : pb::IMessage<Build> {
          private static readonly pb::MessageParser<Build> _parser = new pb::MessageParser<Build>(() => new Build());
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pb::MessageParser<Build> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::CheckinRequest.Types.Checkin.Descriptor.NestedTypes[0]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public Build() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public Build(Build other) : this() {
            fingerprint_ = other.fingerprint_;
            hardware_ = other.hardware_;
            brand_ = other.brand_;
            radio_ = other.radio_;
            bootloader_ = other.bootloader_;
            clientId_ = other.clientId_;
            time_ = other.time_;
            packageVersionCode_ = other.packageVersionCode_;
            device_ = other.device_;
            sdkVersion_ = other.sdkVersion_;
            model_ = other.model_;
            manufacturer_ = other.manufacturer_;
            product_ = other.product_;
            otaInstalled_ = other.otaInstalled_;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public Build Clone() {
            return new Build(this);
          }

          /// <summary>Field number for the "fingerprint" field.</summary>
          public const int FingerprintFieldNumber = 1;
          private string fingerprint_ = "";
          /// <summary>
          /// Build.FINGERPRINT
          /// eg. google/razor/flo:5.0.1/LRX22C/1602158:user/release-keys
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string Fingerprint {
            get { return fingerprint_; }
            set {
              fingerprint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }

          /// <summary>Field number for the "hardware" field.</summary>
          public const int HardwareFieldNumber = 2;
          private string hardware_ = "";
          /// <summary>
          /// Build.HARDWARE
          /// eg. flo
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string Hardware {
            get { return hardware_; }
            set {
              hardware_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }

          /// <summary>Field number for the "brand" field.</summary>
          public const int BrandFieldNumber = 3;
          private string brand_ = "";
          /// <summary>
          /// Build.BRAND
          /// eg. google
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string Brand {
            get { return brand_; }
            set {
              brand_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }

          /// <summary>Field number for the "radio" field.</summary>
          public const int RadioFieldNumber = 4;
          private string radio_ = "";
          /// <summary>
          /// Build.getRadioVersion()
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string Radio {
            get { return radio_; }
            set {
              radio_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }

          /// <summary>Field number for the "bootloader" field.</summary>
          public const int BootloaderFieldNumber = 5;
          private string bootloader_ = "";
          /// <summary>
          /// Build.BOOTLOADER
          /// eg. FLO-04.04
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string Bootloader {
            get { return bootloader_; }
            set {
              bootloader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }

          /// <summary>Field number for the "clientId" field.</summary>
          public const int ClientIdFieldNumber = 6;
          private string clientId_ = "";
          /// <summary>
          /// GoogleSettingsContract.Partner["client_id"]
          /// eg. android-google
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string ClientId {
            get { return clientId_; }
            set {
              clientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }

          /// <summary>Field number for the "time" field.</summary>
          public const int TimeFieldNumber = 7;
          private long time_;
          /// <summary>
          /// Build.TIME / 1000L
          /// eg. 1416533192
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public long Time {
            get { return time_; }
            set {
              time_ = value;
            }
          }

          /// <summary>Field number for the "packageVersionCode" field.</summary>
          public const int PackageVersionCodeFieldNumber = 8;
          private int packageVersionCode_;
          /// <summary>
          /// PackageInfo.versionCode
          /// eg. 6188736
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int PackageVersionCode {
            get { return packageVersionCode_; }
            set {
              packageVersionCode_ = value;
            }
          }

          /// <summary>Field number for the "device" field.</summary>
          public const int DeviceFieldNumber = 9;
          private string device_ = "";
          /// <summary>
          /// Build.DEVICE
          /// eg. flo
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string Device {
            get { return device_; }
            set {
              device_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }

          /// <summary>Field number for the "sdkVersion" field.</summary>
          public const int SdkVersionFieldNumber = 10;
          private int sdkVersion_;
          /// <summary>
          /// Build.VERSION.SDK_INT
          /// eg. 21
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int SdkVersion {
            get { return sdkVersion_; }
            set {
              sdkVersion_ = value;
            }
          }

          /// <summary>Field number for the "model" field.</summary>
          public const int ModelFieldNumber = 11;
          private string model_ = "";
          /// <summary>
          /// Build.MODEL
          /// eg. Nexus 7
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string Model {
            get { return model_; }
            set {
              model_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }

          /// <summary>Field number for the "manufacturer" field.</summary>
          public const int ManufacturerFieldNumber = 12;
          private string manufacturer_ = "";
          /// <summary>
          /// Build.MANUFACTURER
          /// eg. asus
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string Manufacturer {
            get { return manufacturer_; }
            set {
              manufacturer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }

          /// <summary>Field number for the "product" field.</summary>
          public const int ProductFieldNumber = 13;
          private string product_ = "";
          /// <summary>
          /// Build.PRODUCT
          /// eg. razor
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string Product {
            get { return product_; }
            set {
              product_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }

          /// <summary>Field number for the "otaInstalled" field.</summary>
          public const int OtaInstalledFieldNumber = 14;
          private bool otaInstalled_;
          /// <summary>
          /// fileExists("/system/recovery-from-boot.p")
          /// eg. false
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool OtaInstalled {
            get { return otaInstalled_; }
            set {
              otaInstalled_ = value;
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override bool Equals(object other) {
            return Equals(other as Build);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool Equals(Build other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (Fingerprint != other.Fingerprint) return false;
            if (Hardware != other.Hardware) return false;
            if (Brand != other.Brand) return false;
            if (Radio != other.Radio) return false;
            if (Bootloader != other.Bootloader) return false;
            if (ClientId != other.ClientId) return false;
            if (Time != other.Time) return false;
            if (PackageVersionCode != other.PackageVersionCode) return false;
            if (Device != other.Device) return false;
            if (SdkVersion != other.SdkVersion) return false;
            if (Model != other.Model) return false;
            if (Manufacturer != other.Manufacturer) return false;
            if (Product != other.Product) return false;
            if (OtaInstalled != other.OtaInstalled) return false;
            return true;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override int GetHashCode() {
            int hash = 1;
            if (Fingerprint.Length != 0) hash ^= Fingerprint.GetHashCode();
            if (Hardware.Length != 0) hash ^= Hardware.GetHashCode();
            if (Brand.Length != 0) hash ^= Brand.GetHashCode();
            if (Radio.Length != 0) hash ^= Radio.GetHashCode();
            if (Bootloader.Length != 0) hash ^= Bootloader.GetHashCode();
            if (ClientId.Length != 0) hash ^= ClientId.GetHashCode();
            if (Time != 0L) hash ^= Time.GetHashCode();
            if (PackageVersionCode != 0) hash ^= PackageVersionCode.GetHashCode();
            if (Device.Length != 0) hash ^= Device.GetHashCode();
            if (SdkVersion != 0) hash ^= SdkVersion.GetHashCode();
            if (Model.Length != 0) hash ^= Model.GetHashCode();
            if (Manufacturer.Length != 0) hash ^= Manufacturer.GetHashCode();
            if (Product.Length != 0) hash ^= Product.GetHashCode();
            if (OtaInstalled != false) hash ^= OtaInstalled.GetHashCode();
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void WriteTo(pb::CodedOutputStream output) {
            if (Fingerprint.Length != 0) {
              output.WriteRawTag(10);
              output.WriteString(Fingerprint);
            }
            if (Hardware.Length != 0) {
              output.WriteRawTag(18);
              output.WriteString(Hardware);
            }
            if (Brand.Length != 0) {
              output.WriteRawTag(26);
              output.WriteString(Brand);
            }
            if (Radio.Length != 0) {
              output.WriteRawTag(34);
              output.WriteString(Radio);
            }
            if (Bootloader.Length != 0) {
              output.WriteRawTag(42);
              output.WriteString(Bootloader);
            }
            if (ClientId.Length != 0) {
              output.WriteRawTag(50);
              output.WriteString(ClientId);
            }
            if (Time != 0L) {
              output.WriteRawTag(56);
              output.WriteInt64(Time);
            }
            if (PackageVersionCode != 0) {
              output.WriteRawTag(64);
              output.WriteInt32(PackageVersionCode);
            }
            if (Device.Length != 0) {
              output.WriteRawTag(74);
              output.WriteString(Device);
            }
            if (SdkVersion != 0) {
              output.WriteRawTag(80);
              output.WriteInt32(SdkVersion);
            }
            if (Model.Length != 0) {
              output.WriteRawTag(90);
              output.WriteString(Model);
            }
            if (Manufacturer.Length != 0) {
              output.WriteRawTag(98);
              output.WriteString(Manufacturer);
            }
            if (Product.Length != 0) {
              output.WriteRawTag(106);
              output.WriteString(Product);
            }
            if (OtaInstalled != false) {
              output.WriteRawTag(112);
              output.WriteBool(OtaInstalled);
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int CalculateSize() {
            int size = 0;
            if (Fingerprint.Length != 0) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(Fingerprint);
            }
            if (Hardware.Length != 0) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(Hardware);
            }
            if (Brand.Length != 0) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(Brand);
            }
            if (Radio.Length != 0) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(Radio);
            }
            if (Bootloader.Length != 0) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(Bootloader);
            }
            if (ClientId.Length != 0) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientId);
            }
            if (Time != 0L) {
              size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
            }
            if (PackageVersionCode != 0) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackageVersionCode);
            }
            if (Device.Length != 0) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(Device);
            }
            if (SdkVersion != 0) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(SdkVersion);
            }
            if (Model.Length != 0) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(Model);
            }
            if (Manufacturer.Length != 0) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(Manufacturer);
            }
            if (Product.Length != 0) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(Product);
            }
            if (OtaInstalled != false) {
              size += 1 + 1;
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(Build other) {
            if (other == null) {
              return;
            }
            if (other.Fingerprint.Length != 0) {
              Fingerprint = other.Fingerprint;
            }
            if (other.Hardware.Length != 0) {
              Hardware = other.Hardware;
            }
            if (other.Brand.Length != 0) {
              Brand = other.Brand;
            }
            if (other.Radio.Length != 0) {
              Radio = other.Radio;
            }
            if (other.Bootloader.Length != 0) {
              Bootloader = other.Bootloader;
            }
            if (other.ClientId.Length != 0) {
              ClientId = other.ClientId;
            }
            if (other.Time != 0L) {
              Time = other.Time;
            }
            if (other.PackageVersionCode != 0) {
              PackageVersionCode = other.PackageVersionCode;
            }
            if (other.Device.Length != 0) {
              Device = other.Device;
            }
            if (other.SdkVersion != 0) {
              SdkVersion = other.SdkVersion;
            }
            if (other.Model.Length != 0) {
              Model = other.Model;
            }
            if (other.Manufacturer.Length != 0) {
              Manufacturer = other.Manufacturer;
            }
            if (other.Product.Length != 0) {
              Product = other.Product;
            }
            if (other.OtaInstalled != false) {
              OtaInstalled = other.OtaInstalled;
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  input.SkipLastField();
                  break;
                case 10: {
                  Fingerprint = input.ReadString();
                  break;
                }
                case 18: {
                  Hardware = input.ReadString();
                  break;
                }
                case 26: {
                  Brand = input.ReadString();
                  break;
                }
                case 34: {
                  Radio = input.ReadString();
                  break;
                }
                case 42: {
                  Bootloader = input.ReadString();
                  break;
                }
                case 50: {
                  ClientId = input.ReadString();
                  break;
                }
                case 56: {
                  Time = input.ReadInt64();
                  break;
                }
                case 64: {
                  PackageVersionCode = input.ReadInt32();
                  break;
                }
                case 74: {
                  Device = input.ReadString();
                  break;
                }
                case 80: {
                  SdkVersion = input.ReadInt32();
                  break;
                }
                case 90: {
                  Model = input.ReadString();
                  break;
                }
                case 98: {
                  Manufacturer = input.ReadString();
                  break;
                }
                case 106: {
                  Product = input.ReadString();
                  break;
                }
                case 112: {
                  OtaInstalled = input.ReadBool();
                  break;
                }
              }
            }
          }

        }

        public sealed partial class Event : pb::IMessage<Event> {
          private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pb::MessageParser<Event> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::CheckinRequest.Types.Checkin.Descriptor.NestedTypes[1]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public Event() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public Event(Event other) : this() {
            tag_ = other.tag_;
            value_ = other.value_;
            timeMs_ = other.timeMs_;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public Event Clone() {
            return new Event(this);
          }

          /// <summary>Field number for the "tag" field.</summary>
          public const int TagFieldNumber = 1;
          private string tag_ = "";
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string Tag {
            get { return tag_; }
            set {
              tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }

          /// <summary>Field number for the "value" field.</summary>
          public const int ValueFieldNumber = 2;
          private string value_ = "";
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string Value {
            get { return value_; }
            set {
              value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }

          /// <summary>Field number for the "timeMs" field.</summary>
          public const int TimeMsFieldNumber = 3;
          private long timeMs_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public long TimeMs {
            get { return timeMs_; }
            set {
              timeMs_ = value;
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override bool Equals(object other) {
            return Equals(other as Event);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool Equals(Event other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (Tag != other.Tag) return false;
            if (Value != other.Value) return false;
            if (TimeMs != other.TimeMs) return false;
            return true;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override int GetHashCode() {
            int hash = 1;
            if (Tag.Length != 0) hash ^= Tag.GetHashCode();
            if (Value.Length != 0) hash ^= Value.GetHashCode();
            if (TimeMs != 0L) hash ^= TimeMs.GetHashCode();
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void WriteTo(pb::CodedOutputStream output) {
            if (Tag.Length != 0) {
              output.WriteRawTag(10);
              output.WriteString(Tag);
            }
            if (Value.Length != 0) {
              output.WriteRawTag(18);
              output.WriteString(Value);
            }
            if (TimeMs != 0L) {
              output.WriteRawTag(24);
              output.WriteInt64(TimeMs);
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int CalculateSize() {
            int size = 0;
            if (Tag.Length != 0) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
            }
            if (Value.Length != 0) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
            }
            if (TimeMs != 0L) {
              size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeMs);
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(Event other) {
            if (other == null) {
              return;
            }
            if (other.Tag.Length != 0) {
              Tag = other.Tag;
            }
            if (other.Value.Length != 0) {
              Value = other.Value;
            }
            if (other.TimeMs != 0L) {
              TimeMs = other.TimeMs;
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  input.SkipLastField();
                  break;
                case 10: {
                  Tag = input.ReadString();
                  break;
                }
                case 18: {
                  Value = input.ReadString();
                  break;
                }
                case 24: {
                  TimeMs = input.ReadInt64();
                  break;
                }
              }
            }
          }

        }

        public sealed partial class Statistic : pb::IMessage<Statistic> {
          private static readonly pb::MessageParser<Statistic> _parser = new pb::MessageParser<Statistic>(() => new Statistic());
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pb::MessageParser<Statistic> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::CheckinRequest.Types.Checkin.Descriptor.NestedTypes[2]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public Statistic() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public Statistic(Statistic other) : this() {
            tag_ = other.tag_;
            count_ = other.count_;
            sum_ = other.sum_;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public Statistic Clone() {
            return new Statistic(this);
          }

          /// <summary>Field number for the "tag" field.</summary>
          public const int TagFieldNumber = 1;
          private string tag_ = "";
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string Tag {
            get { return tag_; }
            set {
              tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }

          /// <summary>Field number for the "count" field.</summary>
          public const int CountFieldNumber = 2;
          private int count_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int Count {
            get { return count_; }
            set {
              count_ = value;
            }
          }

          /// <summary>Field number for the "sum" field.</summary>
          public const int SumFieldNumber = 3;
          private float sum_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public float Sum {
            get { return sum_; }
            set {
              sum_ = value;
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override bool Equals(object other) {
            return Equals(other as Statistic);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool Equals(Statistic other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (Tag != other.Tag) return false;
            if (Count != other.Count) return false;
            if (Sum != other.Sum) return false;
            return true;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override int GetHashCode() {
            int hash = 1;
            if (Tag.Length != 0) hash ^= Tag.GetHashCode();
            if (Count != 0) hash ^= Count.GetHashCode();
            if (Sum != 0F) hash ^= Sum.GetHashCode();
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void WriteTo(pb::CodedOutputStream output) {
            if (Tag.Length != 0) {
              output.WriteRawTag(10);
              output.WriteString(Tag);
            }
            if (Count != 0) {
              output.WriteRawTag(16);
              output.WriteInt32(Count);
            }
            if (Sum != 0F) {
              output.WriteRawTag(29);
              output.WriteFloat(Sum);
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int CalculateSize() {
            int size = 0;
            if (Tag.Length != 0) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
            }
            if (Count != 0) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
            }
            if (Sum != 0F) {
              size += 1 + 4;
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(Statistic other) {
            if (other == null) {
              return;
            }
            if (other.Tag.Length != 0) {
              Tag = other.Tag;
            }
            if (other.Count != 0) {
              Count = other.Count;
            }
            if (other.Sum != 0F) {
              Sum = other.Sum;
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  input.SkipLastField();
                  break;
                case 10: {
                  Tag = input.ReadString();
                  break;
                }
                case 16: {
                  Count = input.ReadInt32();
                  break;
                }
                case 29: {
                  Sum = input.ReadFloat();
                  break;
                }
              }
            }
          }

        }

      }
      #endregion

    }

    public sealed partial class DeviceConfig : pb::IMessage<DeviceConfig> {
      private static readonly pb::MessageParser<DeviceConfig> _parser = new pb::MessageParser<DeviceConfig>(() => new DeviceConfig());
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<DeviceConfig> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CheckinRequest.Descriptor.NestedTypes[1]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public DeviceConfig() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public DeviceConfig(DeviceConfig other) : this() {
        touchScreen_ = other.touchScreen_;
        keyboardType_ = other.keyboardType_;
        navigation_ = other.navigation_;
        screenLayout_ = other.screenLayout_;
        hasHardKeyboard_ = other.hasHardKeyboard_;
        hasFiveWayNavigation_ = other.hasFiveWayNavigation_;
        densityDpi_ = other.densityDpi_;
        glEsVersion_ = other.glEsVersion_;
        sharedLibrary_ = other.sharedLibrary_.Clone();
        availableFeature_ = other.availableFeature_.Clone();
        nativePlatform_ = other.nativePlatform_.Clone();
        widthPixels_ = other.widthPixels_;
        heightPixels_ = other.heightPixels_;
        locale_ = other.locale_.Clone();
        glExtension_ = other.glExtension_.Clone();
        deviceClass_ = other.deviceClass_;
        maxApkDownloadSizeMb_ = other.maxApkDownloadSizeMb_;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public DeviceConfig Clone() {
        return new DeviceConfig(this);
      }

      /// <summary>Field number for the "touchScreen" field.</summary>
      public const int TouchScreenFieldNumber = 1;
      private int touchScreen_;
      /// <summary>
      /// ConfigurationInfo.reqTouchScreen
      /// eg. 3
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int TouchScreen {
        get { return touchScreen_; }
        set {
          touchScreen_ = value;
        }
      }

      /// <summary>Field number for the "keyboardType" field.</summary>
      public const int KeyboardTypeFieldNumber = 2;
      private int keyboardType_;
      /// <summary>
      /// ConfigurationInfo.reqKeyboardType
      /// eg. 1
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int KeyboardType {
        get { return keyboardType_; }
        set {
          keyboardType_ = value;
        }
      }

      /// <summary>Field number for the "navigation" field.</summary>
      public const int NavigationFieldNumber = 3;
      private int navigation_;
      /// <summary>
      /// ConfigurationInfo.reqNavigation
      /// eg. 1
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int Navigation {
        get { return navigation_; }
        set {
          navigation_ = value;
        }
      }

      /// <summary>Field number for the "screenLayout" field.</summary>
      public const int ScreenLayoutFieldNumber = 4;
      private int screenLayout_;
      /// <summary>
      /// ConfigurationInfo.screenLayout
      /// eg. 3
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int ScreenLayout {
        get { return screenLayout_; }
        set {
          screenLayout_ = value;
        }
      }

      /// <summary>Field number for the "hasHardKeyboard" field.</summary>
      public const int HasHardKeyboardFieldNumber = 5;
      private bool hasHardKeyboard_;
      /// <summary>
      /// ConfigurationInfo.reqInputFeatures &amp; ConfigurationInfo.INPUT_FEATURE_HARD_KEYBOARD
      /// eg. 0
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasHardKeyboard {
        get { return hasHardKeyboard_; }
        set {
          hasHardKeyboard_ = value;
        }
      }

      /// <summary>Field number for the "hasFiveWayNavigation" field.</summary>
      public const int HasFiveWayNavigationFieldNumber = 6;
      private bool hasFiveWayNavigation_;
      /// <summary>
      /// ConfigurationInfo.reqInputFeatures &amp; ConfigurationInfo.INPUT_FEATURE_FIVE_WAY_NAV
      /// eg. 0
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasFiveWayNavigation {
        get { return hasFiveWayNavigation_; }
        set {
          hasFiveWayNavigation_ = value;
        }
      }

      /// <summary>Field number for the "densityDpi" field.</summary>
      public const int DensityDpiFieldNumber = 7;
      private int densityDpi_;
      /// <summary>
      /// DisplayMetrics.densityDpi
      /// eg. 320
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int DensityDpi {
        get { return densityDpi_; }
        set {
          densityDpi_ = value;
        }
      }

      /// <summary>Field number for the "glEsVersion" field.</summary>
      public const int GlEsVersionFieldNumber = 8;
      private int glEsVersion_;
      /// <summary>
      /// ConfigurationInfo.reqGlEsVersion
      /// eg. 196608
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int GlEsVersion {
        get { return glEsVersion_; }
        set {
          glEsVersion_ = value;
        }
      }

      /// <summary>Field number for the "sharedLibrary" field.</summary>
      public const int SharedLibraryFieldNumber = 9;
      private static readonly pb::FieldCodec<string> _repeated_sharedLibrary_codec
          = pb::FieldCodec.ForString(74);
      private readonly pbc::RepeatedField<string> sharedLibrary_ = new pbc::RepeatedField<string>();
      /// <summary>
      /// PackageManager.getSystemSharedLibraryNames
      /// eg. "android.test.runner", "com.android.future.usb.accessory", "com.android.location.provider",
      ///     "com.android.media.remotedisplay", "com.android.mediadrm.signer", "com.google.android.maps",
      ///     "com.google.android.media.effects", "com.google.widevine.software.drm", "javax.obex"
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<string> SharedLibrary {
        get { return sharedLibrary_; }
      }

      /// <summary>Field number for the "availableFeature" field.</summary>
      public const int AvailableFeatureFieldNumber = 10;
      private static readonly pb::FieldCodec<string> _repeated_availableFeature_codec
          = pb::FieldCodec.ForString(82);
      private readonly pbc::RepeatedField<string> availableFeature_ = new pbc::RepeatedField<string>();
      /// <summary>
      /// PackageManager.getSystemAvailableFeatures
      /// eg. android.hardware.[...]
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<string> AvailableFeature {
        get { return availableFeature_; }
      }

      /// <summary>Field number for the "nativePlatform" field.</summary>
      public const int NativePlatformFieldNumber = 11;
      private static readonly pb::FieldCodec<string> _repeated_nativePlatform_codec
          = pb::FieldCodec.ForString(90);
      private readonly pbc::RepeatedField<string> nativePlatform_ = new pbc::RepeatedField<string>();
      /// <summary>
      /// Build.CPU_ABI and Build.CPU_ABI2 != "unknown"
      /// eg. "armeabi-v7a", "armeabi"
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<string> NativePlatform {
        get { return nativePlatform_; }
      }

      /// <summary>Field number for the "widthPixels" field.</summary>
      public const int WidthPixelsFieldNumber = 12;
      private int widthPixels_;
      /// <summary>
      /// DisplayMetrics.widthPixels
      /// eg. 1200
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int WidthPixels {
        get { return widthPixels_; }
        set {
          widthPixels_ = value;
        }
      }

      /// <summary>Field number for the "heightPixels" field.</summary>
      public const int HeightPixelsFieldNumber = 13;
      private int heightPixels_;
      /// <summary>
      /// DisplayMetrics.heightPixels
      /// eg. 1824
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int HeightPixels {
        get { return heightPixels_; }
        set {
          heightPixels_ = value;
        }
      }

      /// <summary>Field number for the "locale" field.</summary>
      public const int LocaleFieldNumber = 14;
      private static readonly pb::FieldCodec<string> _repeated_locale_codec
          = pb::FieldCodec.ForString(114);
      private readonly pbc::RepeatedField<string> locale_ = new pbc::RepeatedField<string>();
      /// <summary>
      /// Context.getAssets.getLocales
      /// eg. [...], "en-US", [...]
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<string> Locale {
        get { return locale_; }
      }

      /// <summary>Field number for the "glExtension" field.</summary>
      public const int GlExtensionFieldNumber = 15;
      private static readonly pb::FieldCodec<string> _repeated_glExtension_codec
          = pb::FieldCodec.ForString(122);
      private readonly pbc::RepeatedField<string> glExtension_ = new pbc::RepeatedField<string>();
      /// <summary>
      /// GLES10.glGetString(GLES10.GL_EXTENSIONS)
      /// eg. "GL_AMD_compressed_ATC_texture", [...]
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<string> GlExtension {
        get { return glExtension_; }
      }

      /// <summary>Field number for the "deviceClass" field.</summary>
      public const int DeviceClassFieldNumber = 16;
      private int deviceClass_;
      /// <summary>
      /// unused
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int DeviceClass {
        get { return deviceClass_; }
        set {
          deviceClass_ = value;
        }
      }

      /// <summary>Field number for the "maxApkDownloadSizeMb" field.</summary>
      public const int MaxApkDownloadSizeMbFieldNumber = 17;
      private int maxApkDownloadSizeMb_;
      /// <summary>
      /// unused
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int MaxApkDownloadSizeMb {
        get { return maxApkDownloadSizeMb_; }
        set {
          maxApkDownloadSizeMb_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as DeviceConfig);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(DeviceConfig other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (TouchScreen != other.TouchScreen) return false;
        if (KeyboardType != other.KeyboardType) return false;
        if (Navigation != other.Navigation) return false;
        if (ScreenLayout != other.ScreenLayout) return false;
        if (HasHardKeyboard != other.HasHardKeyboard) return false;
        if (HasFiveWayNavigation != other.HasFiveWayNavigation) return false;
        if (DensityDpi != other.DensityDpi) return false;
        if (GlEsVersion != other.GlEsVersion) return false;
        if(!sharedLibrary_.Equals(other.sharedLibrary_)) return false;
        if(!availableFeature_.Equals(other.availableFeature_)) return false;
        if(!nativePlatform_.Equals(other.nativePlatform_)) return false;
        if (WidthPixels != other.WidthPixels) return false;
        if (HeightPixels != other.HeightPixels) return false;
        if(!locale_.Equals(other.locale_)) return false;
        if(!glExtension_.Equals(other.glExtension_)) return false;
        if (DeviceClass != other.DeviceClass) return false;
        if (MaxApkDownloadSizeMb != other.MaxApkDownloadSizeMb) return false;
        return true;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (TouchScreen != 0) hash ^= TouchScreen.GetHashCode();
        if (KeyboardType != 0) hash ^= KeyboardType.GetHashCode();
        if (Navigation != 0) hash ^= Navigation.GetHashCode();
        if (ScreenLayout != 0) hash ^= ScreenLayout.GetHashCode();
        if (HasHardKeyboard != false) hash ^= HasHardKeyboard.GetHashCode();
        if (HasFiveWayNavigation != false) hash ^= HasFiveWayNavigation.GetHashCode();
        if (DensityDpi != 0) hash ^= DensityDpi.GetHashCode();
        if (GlEsVersion != 0) hash ^= GlEsVersion.GetHashCode();
        hash ^= sharedLibrary_.GetHashCode();
        hash ^= availableFeature_.GetHashCode();
        hash ^= nativePlatform_.GetHashCode();
        if (WidthPixels != 0) hash ^= WidthPixels.GetHashCode();
        if (HeightPixels != 0) hash ^= HeightPixels.GetHashCode();
        hash ^= locale_.GetHashCode();
        hash ^= glExtension_.GetHashCode();
        if (DeviceClass != 0) hash ^= DeviceClass.GetHashCode();
        if (MaxApkDownloadSizeMb != 0) hash ^= MaxApkDownloadSizeMb.GetHashCode();
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (TouchScreen != 0) {
          output.WriteRawTag(8);
          output.WriteInt32(TouchScreen);
        }
        if (KeyboardType != 0) {
          output.WriteRawTag(16);
          output.WriteInt32(KeyboardType);
        }
        if (Navigation != 0) {
          output.WriteRawTag(24);
          output.WriteInt32(Navigation);
        }
        if (ScreenLayout != 0) {
          output.WriteRawTag(32);
          output.WriteInt32(ScreenLayout);
        }
        if (HasHardKeyboard != false) {
          output.WriteRawTag(40);
          output.WriteBool(HasHardKeyboard);
        }
        if (HasFiveWayNavigation != false) {
          output.WriteRawTag(48);
          output.WriteBool(HasFiveWayNavigation);
        }
        if (DensityDpi != 0) {
          output.WriteRawTag(56);
          output.WriteInt32(DensityDpi);
        }
        if (GlEsVersion != 0) {
          output.WriteRawTag(64);
          output.WriteInt32(GlEsVersion);
        }
        sharedLibrary_.WriteTo(output, _repeated_sharedLibrary_codec);
        availableFeature_.WriteTo(output, _repeated_availableFeature_codec);
        nativePlatform_.WriteTo(output, _repeated_nativePlatform_codec);
        if (WidthPixels != 0) {
          output.WriteRawTag(96);
          output.WriteInt32(WidthPixels);
        }
        if (HeightPixels != 0) {
          output.WriteRawTag(104);
          output.WriteInt32(HeightPixels);
        }
        locale_.WriteTo(output, _repeated_locale_codec);
        glExtension_.WriteTo(output, _repeated_glExtension_codec);
        if (DeviceClass != 0) {
          output.WriteRawTag(128, 1);
          output.WriteInt32(DeviceClass);
        }
        if (MaxApkDownloadSizeMb != 0) {
          output.WriteRawTag(136, 1);
          output.WriteInt32(MaxApkDownloadSizeMb);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (TouchScreen != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(TouchScreen);
        }
        if (KeyboardType != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(KeyboardType);
        }
        if (Navigation != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Navigation);
        }
        if (ScreenLayout != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScreenLayout);
        }
        if (HasHardKeyboard != false) {
          size += 1 + 1;
        }
        if (HasFiveWayNavigation != false) {
          size += 1 + 1;
        }
        if (DensityDpi != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(DensityDpi);
        }
        if (GlEsVersion != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(GlEsVersion);
        }
        size += sharedLibrary_.CalculateSize(_repeated_sharedLibrary_codec);
        size += availableFeature_.CalculateSize(_repeated_availableFeature_codec);
        size += nativePlatform_.CalculateSize(_repeated_nativePlatform_codec);
        if (WidthPixels != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(WidthPixels);
        }
        if (HeightPixels != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeightPixels);
        }
        size += locale_.CalculateSize(_repeated_locale_codec);
        size += glExtension_.CalculateSize(_repeated_glExtension_codec);
        if (DeviceClass != 0) {
          size += 2 + pb::CodedOutputStream.ComputeInt32Size(DeviceClass);
        }
        if (MaxApkDownloadSizeMb != 0) {
          size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxApkDownloadSizeMb);
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(DeviceConfig other) {
        if (other == null) {
          return;
        }
        if (other.TouchScreen != 0) {
          TouchScreen = other.TouchScreen;
        }
        if (other.KeyboardType != 0) {
          KeyboardType = other.KeyboardType;
        }
        if (other.Navigation != 0) {
          Navigation = other.Navigation;
        }
        if (other.ScreenLayout != 0) {
          ScreenLayout = other.ScreenLayout;
        }
        if (other.HasHardKeyboard != false) {
          HasHardKeyboard = other.HasHardKeyboard;
        }
        if (other.HasFiveWayNavigation != false) {
          HasFiveWayNavigation = other.HasFiveWayNavigation;
        }
        if (other.DensityDpi != 0) {
          DensityDpi = other.DensityDpi;
        }
        if (other.GlEsVersion != 0) {
          GlEsVersion = other.GlEsVersion;
        }
        sharedLibrary_.Add(other.sharedLibrary_);
        availableFeature_.Add(other.availableFeature_);
        nativePlatform_.Add(other.nativePlatform_);
        if (other.WidthPixels != 0) {
          WidthPixels = other.WidthPixels;
        }
        if (other.HeightPixels != 0) {
          HeightPixels = other.HeightPixels;
        }
        locale_.Add(other.locale_);
        glExtension_.Add(other.glExtension_);
        if (other.DeviceClass != 0) {
          DeviceClass = other.DeviceClass;
        }
        if (other.MaxApkDownloadSizeMb != 0) {
          MaxApkDownloadSizeMb = other.MaxApkDownloadSizeMb;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 8: {
              TouchScreen = input.ReadInt32();
              break;
            }
            case 16: {
              KeyboardType = input.ReadInt32();
              break;
            }
            case 24: {
              Navigation = input.ReadInt32();
              break;
            }
            case 32: {
              ScreenLayout = input.ReadInt32();
              break;
            }
            case 40: {
              HasHardKeyboard = input.ReadBool();
              break;
            }
            case 48: {
              HasFiveWayNavigation = input.ReadBool();
              break;
            }
            case 56: {
              DensityDpi = input.ReadInt32();
              break;
            }
            case 64: {
              GlEsVersion = input.ReadInt32();
              break;
            }
            case 74: {
              sharedLibrary_.AddEntriesFrom(input, _repeated_sharedLibrary_codec);
              break;
            }
            case 82: {
              availableFeature_.AddEntriesFrom(input, _repeated_availableFeature_codec);
              break;
            }
            case 90: {
              nativePlatform_.AddEntriesFrom(input, _repeated_nativePlatform_codec);
              break;
            }
            case 96: {
              WidthPixels = input.ReadInt32();
              break;
            }
            case 104: {
              HeightPixels = input.ReadInt32();
              break;
            }
            case 114: {
              locale_.AddEntriesFrom(input, _repeated_locale_codec);
              break;
            }
            case 122: {
              glExtension_.AddEntriesFrom(input, _repeated_glExtension_codec);
              break;
            }
            case 128: {
              DeviceClass = input.ReadInt32();
              break;
            }
            case 136: {
              MaxApkDownloadSizeMb = input.ReadInt32();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

public sealed partial class CheckinResponse : pb::IMessage<CheckinResponse> {
  private static readonly pb::MessageParser<CheckinResponse> _parser = new pb::MessageParser<CheckinResponse>(() => new CheckinResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CheckinResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CheckinReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CheckinResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CheckinResponse(CheckinResponse other) : this() {
    statsOk_ = other.statsOk_;
    intent_ = other.intent_.Clone();
    timeMs_ = other.timeMs_;
    digest_ = other.digest_;
    setting_ = other.setting_.Clone();
    marketOk_ = other.marketOk_;
    androidId_ = other.androidId_;
    securityToken_ = other.securityToken_;
    settingsDiff_ = other.settingsDiff_;
    deleteSetting_ = other.deleteSetting_.Clone();
    versionInfo_ = other.versionInfo_;
    deviceDataVersionInfo_ = other.deviceDataVersionInfo_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CheckinResponse Clone() {
    return new CheckinResponse(this);
  }

  /// <summary>Field number for the "statsOk" field.</summary>
  public const int StatsOkFieldNumber = 1;
  private bool statsOk_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool StatsOk {
    get { return statsOk_; }
    set {
      statsOk_ = value;
    }
  }

  /// <summary>Field number for the "intent" field.</summary>
  public const int IntentFieldNumber = 2;
  private static readonly pb::FieldCodec<global::CheckinResponse.Types.Intent> _repeated_intent_codec
      = pb::FieldCodec.ForMessage(18, global::CheckinResponse.Types.Intent.Parser);
  private readonly pbc::RepeatedField<global::CheckinResponse.Types.Intent> intent_ = new pbc::RepeatedField<global::CheckinResponse.Types.Intent>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CheckinResponse.Types.Intent> Intent {
    get { return intent_; }
  }

  /// <summary>Field number for the "timeMs" field.</summary>
  public const int TimeMsFieldNumber = 3;
  private long timeMs_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TimeMs {
    get { return timeMs_; }
    set {
      timeMs_ = value;
    }
  }

  /// <summary>Field number for the "digest" field.</summary>
  public const int DigestFieldNumber = 4;
  private string digest_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Digest {
    get { return digest_; }
    set {
      digest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "setting" field.</summary>
  public const int SettingFieldNumber = 5;
  private static readonly pb::FieldCodec<global::CheckinResponse.Types.GservicesSetting> _repeated_setting_codec
      = pb::FieldCodec.ForMessage(42, global::CheckinResponse.Types.GservicesSetting.Parser);
  private readonly pbc::RepeatedField<global::CheckinResponse.Types.GservicesSetting> setting_ = new pbc::RepeatedField<global::CheckinResponse.Types.GservicesSetting>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CheckinResponse.Types.GservicesSetting> Setting {
    get { return setting_; }
  }

  /// <summary>Field number for the "marketOk" field.</summary>
  public const int MarketOkFieldNumber = 6;
  private bool marketOk_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool MarketOk {
    get { return marketOk_; }
    set {
      marketOk_ = value;
    }
  }

  /// <summary>Field number for the "androidId" field.</summary>
  public const int AndroidIdFieldNumber = 7;
  private ulong androidId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong AndroidId {
    get { return androidId_; }
    set {
      androidId_ = value;
    }
  }

  /// <summary>Field number for the "securityToken" field.</summary>
  public const int SecurityTokenFieldNumber = 8;
  private ulong securityToken_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong SecurityToken {
    get { return securityToken_; }
    set {
      securityToken_ = value;
    }
  }

  /// <summary>Field number for the "settingsDiff" field.</summary>
  public const int SettingsDiffFieldNumber = 9;
  private bool settingsDiff_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool SettingsDiff {
    get { return settingsDiff_; }
    set {
      settingsDiff_ = value;
    }
  }

  /// <summary>Field number for the "deleteSetting" field.</summary>
  public const int DeleteSettingFieldNumber = 10;
  private static readonly pb::FieldCodec<string> _repeated_deleteSetting_codec
      = pb::FieldCodec.ForString(82);
  private readonly pbc::RepeatedField<string> deleteSetting_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> DeleteSetting {
    get { return deleteSetting_; }
  }

  /// <summary>Field number for the "versionInfo" field.</summary>
  public const int VersionInfoFieldNumber = 11;
  private string versionInfo_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VersionInfo {
    get { return versionInfo_; }
    set {
      versionInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceDataVersionInfo" field.</summary>
  public const int DeviceDataVersionInfoFieldNumber = 12;
  private string deviceDataVersionInfo_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceDataVersionInfo {
    get { return deviceDataVersionInfo_; }
    set {
      deviceDataVersionInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CheckinResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CheckinResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (StatsOk != other.StatsOk) return false;
    if(!intent_.Equals(other.intent_)) return false;
    if (TimeMs != other.TimeMs) return false;
    if (Digest != other.Digest) return false;
    if(!setting_.Equals(other.setting_)) return false;
    if (MarketOk != other.MarketOk) return false;
    if (AndroidId != other.AndroidId) return false;
    if (SecurityToken != other.SecurityToken) return false;
    if (SettingsDiff != other.SettingsDiff) return false;
    if(!deleteSetting_.Equals(other.deleteSetting_)) return false;
    if (VersionInfo != other.VersionInfo) return false;
    if (DeviceDataVersionInfo != other.DeviceDataVersionInfo) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (StatsOk != false) hash ^= StatsOk.GetHashCode();
    hash ^= intent_.GetHashCode();
    if (TimeMs != 0L) hash ^= TimeMs.GetHashCode();
    if (Digest.Length != 0) hash ^= Digest.GetHashCode();
    hash ^= setting_.GetHashCode();
    if (MarketOk != false) hash ^= MarketOk.GetHashCode();
    if (AndroidId != 0UL) hash ^= AndroidId.GetHashCode();
    if (SecurityToken != 0UL) hash ^= SecurityToken.GetHashCode();
    if (SettingsDiff != false) hash ^= SettingsDiff.GetHashCode();
    hash ^= deleteSetting_.GetHashCode();
    if (VersionInfo.Length != 0) hash ^= VersionInfo.GetHashCode();
    if (DeviceDataVersionInfo.Length != 0) hash ^= DeviceDataVersionInfo.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (StatsOk != false) {
      output.WriteRawTag(8);
      output.WriteBool(StatsOk);
    }
    intent_.WriteTo(output, _repeated_intent_codec);
    if (TimeMs != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(TimeMs);
    }
    if (Digest.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Digest);
    }
    setting_.WriteTo(output, _repeated_setting_codec);
    if (MarketOk != false) {
      output.WriteRawTag(48);
      output.WriteBool(MarketOk);
    }
    if (AndroidId != 0UL) {
      output.WriteRawTag(57);
      output.WriteFixed64(AndroidId);
    }
    if (SecurityToken != 0UL) {
      output.WriteRawTag(65);
      output.WriteFixed64(SecurityToken);
    }
    if (SettingsDiff != false) {
      output.WriteRawTag(72);
      output.WriteBool(SettingsDiff);
    }
    deleteSetting_.WriteTo(output, _repeated_deleteSetting_codec);
    if (VersionInfo.Length != 0) {
      output.WriteRawTag(90);
      output.WriteString(VersionInfo);
    }
    if (DeviceDataVersionInfo.Length != 0) {
      output.WriteRawTag(98);
      output.WriteString(DeviceDataVersionInfo);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (StatsOk != false) {
      size += 1 + 1;
    }
    size += intent_.CalculateSize(_repeated_intent_codec);
    if (TimeMs != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeMs);
    }
    if (Digest.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Digest);
    }
    size += setting_.CalculateSize(_repeated_setting_codec);
    if (MarketOk != false) {
      size += 1 + 1;
    }
    if (AndroidId != 0UL) {
      size += 1 + 8;
    }
    if (SecurityToken != 0UL) {
      size += 1 + 8;
    }
    if (SettingsDiff != false) {
      size += 1 + 1;
    }
    size += deleteSetting_.CalculateSize(_repeated_deleteSetting_codec);
    if (VersionInfo.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionInfo);
    }
    if (DeviceDataVersionInfo.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceDataVersionInfo);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CheckinResponse other) {
    if (other == null) {
      return;
    }
    if (other.StatsOk != false) {
      StatsOk = other.StatsOk;
    }
    intent_.Add(other.intent_);
    if (other.TimeMs != 0L) {
      TimeMs = other.TimeMs;
    }
    if (other.Digest.Length != 0) {
      Digest = other.Digest;
    }
    setting_.Add(other.setting_);
    if (other.MarketOk != false) {
      MarketOk = other.MarketOk;
    }
    if (other.AndroidId != 0UL) {
      AndroidId = other.AndroidId;
    }
    if (other.SecurityToken != 0UL) {
      SecurityToken = other.SecurityToken;
    }
    if (other.SettingsDiff != false) {
      SettingsDiff = other.SettingsDiff;
    }
    deleteSetting_.Add(other.deleteSetting_);
    if (other.VersionInfo.Length != 0) {
      VersionInfo = other.VersionInfo;
    }
    if (other.DeviceDataVersionInfo.Length != 0) {
      DeviceDataVersionInfo = other.DeviceDataVersionInfo;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          StatsOk = input.ReadBool();
          break;
        }
        case 18: {
          intent_.AddEntriesFrom(input, _repeated_intent_codec);
          break;
        }
        case 24: {
          TimeMs = input.ReadInt64();
          break;
        }
        case 34: {
          Digest = input.ReadString();
          break;
        }
        case 42: {
          setting_.AddEntriesFrom(input, _repeated_setting_codec);
          break;
        }
        case 48: {
          MarketOk = input.ReadBool();
          break;
        }
        case 57: {
          AndroidId = input.ReadFixed64();
          break;
        }
        case 65: {
          SecurityToken = input.ReadFixed64();
          break;
        }
        case 72: {
          SettingsDiff = input.ReadBool();
          break;
        }
        case 82: {
          deleteSetting_.AddEntriesFrom(input, _repeated_deleteSetting_codec);
          break;
        }
        case 90: {
          VersionInfo = input.ReadString();
          break;
        }
        case 98: {
          DeviceDataVersionInfo = input.ReadString();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the CheckinResponse message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class Intent : pb::IMessage<Intent> {
      private static readonly pb::MessageParser<Intent> _parser = new pb::MessageParser<Intent>(() => new Intent());
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Intent> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CheckinResponse.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Intent() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Intent(Intent other) : this() {
        action_ = other.action_;
        dataUri_ = other.dataUri_;
        mimeType_ = other.mimeType_;
        javaClass_ = other.javaClass_;
        extra_ = other.extra_.Clone();
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Intent Clone() {
        return new Intent(this);
      }

      /// <summary>Field number for the "action" field.</summary>
      public const int ActionFieldNumber = 1;
      private string action_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Action {
        get { return action_; }
        set {
          action_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "dataUri" field.</summary>
      public const int DataUriFieldNumber = 2;
      private string dataUri_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string DataUri {
        get { return dataUri_; }
        set {
          dataUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "mimeType" field.</summary>
      public const int MimeTypeFieldNumber = 3;
      private string mimeType_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string MimeType {
        get { return mimeType_; }
        set {
          mimeType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "javaClass" field.</summary>
      public const int JavaClassFieldNumber = 4;
      private string javaClass_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string JavaClass {
        get { return javaClass_; }
        set {
          javaClass_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "extra" field.</summary>
      public const int ExtraFieldNumber = 5;
      private static readonly pb::FieldCodec<global::CheckinResponse.Types.Intent.Types.Extra> _repeated_extra_codec
          = pb::FieldCodec.ForMessage(42, global::CheckinResponse.Types.Intent.Types.Extra.Parser);
      private readonly pbc::RepeatedField<global::CheckinResponse.Types.Intent.Types.Extra> extra_ = new pbc::RepeatedField<global::CheckinResponse.Types.Intent.Types.Extra>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::CheckinResponse.Types.Intent.Types.Extra> Extra {
        get { return extra_; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Intent);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Intent other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Action != other.Action) return false;
        if (DataUri != other.DataUri) return false;
        if (MimeType != other.MimeType) return false;
        if (JavaClass != other.JavaClass) return false;
        if(!extra_.Equals(other.extra_)) return false;
        return true;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (Action.Length != 0) hash ^= Action.GetHashCode();
        if (DataUri.Length != 0) hash ^= DataUri.GetHashCode();
        if (MimeType.Length != 0) hash ^= MimeType.GetHashCode();
        if (JavaClass.Length != 0) hash ^= JavaClass.GetHashCode();
        hash ^= extra_.GetHashCode();
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (Action.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(Action);
        }
        if (DataUri.Length != 0) {
          output.WriteRawTag(18);
          output.WriteString(DataUri);
        }
        if (MimeType.Length != 0) {
          output.WriteRawTag(26);
          output.WriteString(MimeType);
        }
        if (JavaClass.Length != 0) {
          output.WriteRawTag(34);
          output.WriteString(JavaClass);
        }
        extra_.WriteTo(output, _repeated_extra_codec);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (Action.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Action);
        }
        if (DataUri.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(DataUri);
        }
        if (MimeType.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(MimeType);
        }
        if (JavaClass.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(JavaClass);
        }
        size += extra_.CalculateSize(_repeated_extra_codec);
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Intent other) {
        if (other == null) {
          return;
        }
        if (other.Action.Length != 0) {
          Action = other.Action;
        }
        if (other.DataUri.Length != 0) {
          DataUri = other.DataUri;
        }
        if (other.MimeType.Length != 0) {
          MimeType = other.MimeType;
        }
        if (other.JavaClass.Length != 0) {
          JavaClass = other.JavaClass;
        }
        extra_.Add(other.extra_);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 10: {
              Action = input.ReadString();
              break;
            }
            case 18: {
              DataUri = input.ReadString();
              break;
            }
            case 26: {
              MimeType = input.ReadString();
              break;
            }
            case 34: {
              JavaClass = input.ReadString();
              break;
            }
            case 42: {
              extra_.AddEntriesFrom(input, _repeated_extra_codec);
              break;
            }
          }
        }
      }

      #region Nested types
      /// <summary>Container for nested types declared in the Intent message type.</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static partial class Types {
        public sealed partial class Extra : pb::IMessage<Extra> {
          private static readonly pb::MessageParser<Extra> _parser = new pb::MessageParser<Extra>(() => new Extra());
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pb::MessageParser<Extra> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::CheckinResponse.Types.Intent.Descriptor.NestedTypes[0]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public Extra() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public Extra(Extra other) : this() {
            name_ = other.name_;
            value_ = other.value_;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public Extra Clone() {
            return new Extra(this);
          }

          /// <summary>Field number for the "name" field.</summary>
          public const int NameFieldNumber = 6;
          private string name_ = "";
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string Name {
            get { return name_; }
            set {
              name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }

          /// <summary>Field number for the "value" field.</summary>
          public const int ValueFieldNumber = 7;
          private string value_ = "";
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string Value {
            get { return value_; }
            set {
              value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override bool Equals(object other) {
            return Equals(other as Extra);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool Equals(Extra other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (Name != other.Name) return false;
            if (Value != other.Value) return false;
            return true;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override int GetHashCode() {
            int hash = 1;
            if (Name.Length != 0) hash ^= Name.GetHashCode();
            if (Value.Length != 0) hash ^= Value.GetHashCode();
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void WriteTo(pb::CodedOutputStream output) {
            if (Name.Length != 0) {
              output.WriteRawTag(50);
              output.WriteString(Name);
            }
            if (Value.Length != 0) {
              output.WriteRawTag(58);
              output.WriteString(Value);
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int CalculateSize() {
            int size = 0;
            if (Name.Length != 0) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (Value.Length != 0) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(Extra other) {
            if (other == null) {
              return;
            }
            if (other.Name.Length != 0) {
              Name = other.Name;
            }
            if (other.Value.Length != 0) {
              Value = other.Value;
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  input.SkipLastField();
                  break;
                case 50: {
                  Name = input.ReadString();
                  break;
                }
                case 58: {
                  Value = input.ReadString();
                  break;
                }
              }
            }
          }

        }

      }
      #endregion

    }

    public sealed partial class GservicesSetting : pb::IMessage<GservicesSetting> {
      private static readonly pb::MessageParser<GservicesSetting> _parser = new pb::MessageParser<GservicesSetting>(() => new GservicesSetting());
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<GservicesSetting> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CheckinResponse.Descriptor.NestedTypes[1]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public GservicesSetting() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public GservicesSetting(GservicesSetting other) : this() {
        name_ = other.name_;
        value_ = other.value_;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public GservicesSetting Clone() {
        return new GservicesSetting(this);
      }

      /// <summary>Field number for the "name" field.</summary>
      public const int NameFieldNumber = 1;
      private pb::ByteString name_ = pb::ByteString.Empty;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pb::ByteString Name {
        get { return name_; }
        set {
          name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "value" field.</summary>
      public const int ValueFieldNumber = 2;
      private pb::ByteString value_ = pb::ByteString.Empty;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pb::ByteString Value {
        get { return value_; }
        set {
          value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as GservicesSetting);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(GservicesSetting other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Name != other.Name) return false;
        if (Value != other.Value) return false;
        return true;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (Name.Length != 0) hash ^= Name.GetHashCode();
        if (Value.Length != 0) hash ^= Value.GetHashCode();
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (Name.Length != 0) {
          output.WriteRawTag(10);
          output.WriteBytes(Name);
        }
        if (Value.Length != 0) {
          output.WriteRawTag(18);
          output.WriteBytes(Value);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (Name.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
        }
        if (Value.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(GservicesSetting other) {
        if (other == null) {
          return;
        }
        if (other.Name.Length != 0) {
          Name = other.Name;
        }
        if (other.Value.Length != 0) {
          Value = other.Value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 10: {
              Name = input.ReadBytes();
              break;
            }
            case 18: {
              Value = input.ReadBytes();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
*/