// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mcs_pb.proto
/*
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from mcs_pb.proto</summary>
public static partial class McsPbReflection {

  #region Descriptor
  /// <summary>File descriptor for mcs_pb.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static McsPbReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgxtY3NfcGIucHJvdG8iUwoNSGVhcnRiZWF0UGluZxIRCglzdHJlYW1faWQY",
          "ASABKAUSHwoXbGFzdF9zdHJlYW1faWRfcmVjZWl2ZWQYAiABKAUSDgoGc3Rh",
          "dHVzGAMgASgDIlIKDEhlYXJ0YmVhdEFjaxIRCglzdHJlYW1faWQYASABKAUS",
          "HwoXbGFzdF9zdHJlYW1faWRfcmVjZWl2ZWQYAiABKAUSDgoGc3RhdHVzGAMg",
          "ASgDIlcKCUVycm9ySW5mbxIMCgRjb2RlGAEgASgFEg8KB21lc3NhZ2UYAiAB",
          "KAkSDAoEdHlwZRgDIAEoCRIdCglleHRlbnNpb24YBCABKAsyCi5FeHRlbnNp",
          "b24iJgoHU2V0dGluZxIMCgRuYW1lGAEgASgJEg0KBXZhbHVlGAIgASgJIkEK",
          "DUhlYXJ0YmVhdFN0YXQSCgoCaXAYASABKAkSDwoHdGltZW91dBgCIAEoCBIT",
          "CgtpbnRlcnZhbF9tcxgDIAEoBSJHCg9IZWFydGJlYXRDb25maWcSEwoLdXBs",
          "b2FkX3N0YXQYASABKAgSCgoCaXAYAiABKAkSEwoLaW50ZXJ2YWxfbXMYAyAB",
          "KAUi2QMKDExvZ2luUmVxdWVzdBIKCgJpZBgBIAEoCRIOCgZkb21haW4YAiAB",
          "KAkSDAoEdXNlchgDIAEoCRIQCghyZXNvdXJjZRgEIAEoCRISCgphdXRoX3Rv",
          "a2VuGAUgASgJEhEKCWRldmljZV9pZBgGIAEoCRITCgtsYXN0X3JtcV9pZBgH",
          "IAEoAxIZCgdzZXR0aW5nGAggAygLMgguU2V0dGluZxIQCghjb21wcmVzcxgJ",
          "IAEoBRIeChZyZWNlaXZlZF9wZXJzaXN0ZW50X2lkGAogAygJEhoKEmluY2x1",
          "ZGVfc3RyZWFtX2lkcxgLIAEoCBIaChJhZGFwdGl2ZV9oZWFydGJlYXQYDCAB",
          "KAgSJgoOaGVhcnRiZWF0X3N0YXQYDSABKAsyDi5IZWFydGJlYXRTdGF0EhAK",
          "CHVzZV9ybXEyGA4gASgIEhIKCmFjY291bnRfaWQYDyABKAMSLwoMYXV0aF9z",
          "ZXJ2aWNlGBAgASgOMhkuTG9naW5SZXF1ZXN0LkF1dGhTZXJ2aWNlEhQKDG5l",
          "dHdvcmtfdHlwZRgRIAEoBRIOCgZzdGF0dXMYEiABKAMiJwoLQXV0aFNlcnZp",
          "Y2USCAoEdGVzdBAAEg4KCkFORFJPSURfSUQQAiLYAQoNTG9naW5SZXNwb25z",
          "ZRIKCgJpZBgBIAEoCRILCgNqaWQYAiABKAkSGQoFZXJyb3IYAyABKAsyCi5F",
          "cnJvckluZm8SGQoHc2V0dGluZxgEIAMoCzIILlNldHRpbmcSEQoJc3RyZWFt",
          "X2lkGAUgASgFEh8KF2xhc3Rfc3RyZWFtX2lkX3JlY2VpdmVkGAYgASgFEioK",
          "EGhlYXJ0YmVhdF9jb25maWcYByABKAsyEC5IZWFydGJlYXRDb25maWcSGAoQ",
          "c2VydmVyX3RpbWVzdGFtcBgIIAEoAyIvChFTdHJlYW1FcnJvclN0YW56YRIM",
          "CgR0eXBlGAEgASgJEgwKBHRleHQYAiABKAkiBwoFQ2xvc2UiJQoJRXh0ZW5z",
          "aW9uEgoKAmlkGAEgASgFEgwKBGRhdGEYAiABKAwivwIKCElxU3RhbnphEg4K",
          "BnJtcV9pZBgBIAEoAxIeCgR0eXBlGAIgASgOMhAuSXFTdGFuemEuSXFUeXBl",
          "EgoKAmlkGAMgASgJEgwKBGZyb20YBCABKAkSCgoCdG8YBSABKAkSGQoFZXJy",
          "b3IYBiABKAsyCi5FcnJvckluZm8SHQoJZXh0ZW5zaW9uGAcgASgLMgouRXh0",
          "ZW5zaW9uEhUKDXBlcnNpc3RlbnRfaWQYCCABKAkSEQoJc3RyZWFtX2lkGAkg",
          "ASgFEh8KF2xhc3Rfc3RyZWFtX2lkX3JlY2VpdmVkGAogASgFEhIKCmFjY291",
          "bnRfaWQYCyABKAMSDgoGc3RhdHVzGAwgASgDIjQKBklxVHlwZRIHCgNHRVQQ",
          "ABIHCgNTRVQQARIKCgZSRVNVTFQQAhIMCghJUV9FUlJPUhADIiUKB0FwcERh",
          "dGESCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJIrADChFEYXRhTWVzc2Fn",
          "ZVN0YW56YRIOCgZybXFfaWQYASABKAMSCgoCaWQYAiABKAkSDAoEZnJvbRgD",
          "IAEoCRIKCgJ0bxgEIAEoCRIQCghjYXRlZ29yeRgFIAEoCRINCgV0b2tlbhgG",
          "IAEoCRIaCghhcHBfZGF0YRgHIAMoCzIILkFwcERhdGESGwoTZnJvbV90cnVz",
          "dGVkX3NlcnZlchgIIAEoCBIVCg1wZXJzaXN0ZW50X2lkGAkgASgJEhEKCXN0",
          "cmVhbV9pZBgKIAEoBRIfChdsYXN0X3N0cmVhbV9pZF9yZWNlaXZlZBgLIAEo",
          "BRISCgpwZXJtaXNzaW9uGAwgASgJEg4KBnJlZ19pZBgNIAEoCRIVCg1wa2df",
          "c2lnbmF0dXJlGA4gASgJEhEKCWNsaWVudF9pZBgPIAEoCRIWCg5kZXZpY2Vf",
          "dXNlcl9pZBgQIAEoAxILCgN0dGwYESABKAUSDAoEc2VudBgSIAEoAxIOCgZx",
          "dWV1ZWQYEyABKAUSDgoGc3RhdHVzGBQgASgDEhAKCHJhd19kYXRhGBUgASgM",
          "Eg0KBWRlbGF5GBYgASgFIgsKCVN0cmVhbUFjayIaCgxTZWxlY3RpdmVBY2sS",
          "CgoCaWQYASADKAlCGAoWb3JnLm1pY3JvZy5nbXMuZ2NtLm1jc2IGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::HeartbeatPing), global::HeartbeatPing.Parser, new[]{ "StreamId", "LastStreamIdReceived", "Status" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HeartbeatAck), global::HeartbeatAck.Parser, new[]{ "StreamId", "LastStreamIdReceived", "Status" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ErrorInfo), global::ErrorInfo.Parser, new[]{ "Code", "Message", "Type", "Extension" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Setting), global::Setting.Parser, new[]{ "Name", "Value" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HeartbeatStat), global::HeartbeatStat.Parser, new[]{ "Ip", "Timeout", "IntervalMs" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HeartbeatConfig), global::HeartbeatConfig.Parser, new[]{ "UploadStat", "Ip", "IntervalMs" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LoginRequest), global::LoginRequest.Parser, new[]{ "Id", "Domain", "User", "Resource", "AuthToken", "DeviceId", "LastRmqId", "Setting", "Compress", "ReceivedPersistentId", "IncludeStreamIds", "AdaptiveHeartbeat", "HeartbeatStat", "UseRmq2", "AccountId", "AuthService", "NetworkType", "Status" }, null, new[]{ typeof(global::LoginRequest.Types.AuthService) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LoginResponse), global::LoginResponse.Parser, new[]{ "Id", "Jid", "Error", "Setting", "StreamId", "LastStreamIdReceived", "HeartbeatConfig", "ServerTimestamp" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::StreamErrorStanza), global::StreamErrorStanza.Parser, new[]{ "Type", "Text" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Close), global::Close.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Extension), global::Extension.Parser, new[]{ "Id", "Data" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::IqStanza), global::IqStanza.Parser, new[]{ "RmqId", "Type", "Id", "From", "To", "Error", "Extension", "PersistentId", "StreamId", "LastStreamIdReceived", "AccountId", "Status" }, null, new[]{ typeof(global::IqStanza.Types.IqType) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AppData), global::AppData.Parser, new[]{ "Key", "Value" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DataMessageStanza), global::DataMessageStanza.Parser, new[]{ "RmqId", "Id", "From", "To", "Category", "Token", "AppData", "FromTrustedServer", "PersistentId", "StreamId", "LastStreamIdReceived", "Permission", "RegId", "PkgSignature", "ClientId", "DeviceUserId", "Ttl", "Sent", "Queued", "Status", "RawData", "Delay" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::StreamAck), global::StreamAck.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SelectiveAck), global::SelectiveAck.Parser, new[]{ "Id" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
///*
///TAG: 0
/// </summary>
public sealed partial class HeartbeatPing : pb::IMessage<HeartbeatPing> {
  private static readonly pb::MessageParser<HeartbeatPing> _parser = new pb::MessageParser<HeartbeatPing>(() => new HeartbeatPing());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HeartbeatPing> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::McsPbReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeartbeatPing() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeartbeatPing(HeartbeatPing other) : this() {
    streamId_ = other.streamId_;
    lastStreamIdReceived_ = other.lastStreamIdReceived_;
    status_ = other.status_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeartbeatPing Clone() {
    return new HeartbeatPing(this);
  }

  /// <summary>Field number for the "stream_id" field.</summary>
  public const int StreamIdFieldNumber = 1;
  private int streamId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StreamId {
    get { return streamId_; }
    set {
      streamId_ = value;
    }
  }

  /// <summary>Field number for the "last_stream_id_received" field.</summary>
  public const int LastStreamIdReceivedFieldNumber = 2;
  private int lastStreamIdReceived_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LastStreamIdReceived {
    get { return lastStreamIdReceived_; }
    set {
      lastStreamIdReceived_ = value;
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 3;
  private long status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HeartbeatPing);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HeartbeatPing other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (StreamId != other.StreamId) return false;
    if (LastStreamIdReceived != other.LastStreamIdReceived) return false;
    if (Status != other.Status) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (StreamId != 0) hash ^= StreamId.GetHashCode();
    if (LastStreamIdReceived != 0) hash ^= LastStreamIdReceived.GetHashCode();
    if (Status != 0L) hash ^= Status.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (StreamId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(StreamId);
    }
    if (LastStreamIdReceived != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(LastStreamIdReceived);
    }
    if (Status != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(Status);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (StreamId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StreamId);
    }
    if (LastStreamIdReceived != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastStreamIdReceived);
    }
    if (Status != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Status);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HeartbeatPing other) {
    if (other == null) {
      return;
    }
    if (other.StreamId != 0) {
      StreamId = other.StreamId;
    }
    if (other.LastStreamIdReceived != 0) {
      LastStreamIdReceived = other.LastStreamIdReceived;
    }
    if (other.Status != 0L) {
      Status = other.Status;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          StreamId = input.ReadInt32();
          break;
        }
        case 16: {
          LastStreamIdReceived = input.ReadInt32();
          break;
        }
        case 24: {
          Status = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///*
///TAG: 1
/// </summary>
public sealed partial class HeartbeatAck : pb::IMessage<HeartbeatAck> {
  private static readonly pb::MessageParser<HeartbeatAck> _parser = new pb::MessageParser<HeartbeatAck>(() => new HeartbeatAck());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HeartbeatAck> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::McsPbReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeartbeatAck() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeartbeatAck(HeartbeatAck other) : this() {
    streamId_ = other.streamId_;
    lastStreamIdReceived_ = other.lastStreamIdReceived_;
    status_ = other.status_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeartbeatAck Clone() {
    return new HeartbeatAck(this);
  }

  /// <summary>Field number for the "stream_id" field.</summary>
  public const int StreamIdFieldNumber = 1;
  private int streamId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StreamId {
    get { return streamId_; }
    set {
      streamId_ = value;
    }
  }

  /// <summary>Field number for the "last_stream_id_received" field.</summary>
  public const int LastStreamIdReceivedFieldNumber = 2;
  private int lastStreamIdReceived_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LastStreamIdReceived {
    get { return lastStreamIdReceived_; }
    set {
      lastStreamIdReceived_ = value;
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 3;
  private long status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HeartbeatAck);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HeartbeatAck other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (StreamId != other.StreamId) return false;
    if (LastStreamIdReceived != other.LastStreamIdReceived) return false;
    if (Status != other.Status) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (StreamId != 0) hash ^= StreamId.GetHashCode();
    if (LastStreamIdReceived != 0) hash ^= LastStreamIdReceived.GetHashCode();
    if (Status != 0L) hash ^= Status.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (StreamId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(StreamId);
    }
    if (LastStreamIdReceived != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(LastStreamIdReceived);
    }
    if (Status != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(Status);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (StreamId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StreamId);
    }
    if (LastStreamIdReceived != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastStreamIdReceived);
    }
    if (Status != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Status);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HeartbeatAck other) {
    if (other == null) {
      return;
    }
    if (other.StreamId != 0) {
      StreamId = other.StreamId;
    }
    if (other.LastStreamIdReceived != 0) {
      LastStreamIdReceived = other.LastStreamIdReceived;
    }
    if (other.Status != 0L) {
      Status = other.Status;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          StreamId = input.ReadInt32();
          break;
        }
        case 16: {
          LastStreamIdReceived = input.ReadInt32();
          break;
        }
        case 24: {
          Status = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class ErrorInfo : pb::IMessage<ErrorInfo> {
  private static readonly pb::MessageParser<ErrorInfo> _parser = new pb::MessageParser<ErrorInfo>(() => new ErrorInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ErrorInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::McsPbReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ErrorInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ErrorInfo(ErrorInfo other) : this() {
    code_ = other.code_;
    message_ = other.message_;
    type_ = other.type_;
    Extension = other.extension_ != null ? other.Extension.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ErrorInfo Clone() {
    return new ErrorInfo(this);
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 1;
  private int code_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Code {
    get { return code_; }
    set {
      code_ = value;
    }
  }

  /// <summary>Field number for the "message" field.</summary>
  public const int MessageFieldNumber = 2;
  private string message_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Message {
    get { return message_; }
    set {
      message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 3;
  private string type_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Type {
    get { return type_; }
    set {
      type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "extension" field.</summary>
  public const int ExtensionFieldNumber = 4;
  private global::Extension extension_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Extension Extension {
    get { return extension_; }
    set {
      extension_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ErrorInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ErrorInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Code != other.Code) return false;
    if (Message != other.Message) return false;
    if (Type != other.Type) return false;
    if (!object.Equals(Extension, other.Extension)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Code != 0) hash ^= Code.GetHashCode();
    if (Message.Length != 0) hash ^= Message.GetHashCode();
    if (Type.Length != 0) hash ^= Type.GetHashCode();
    if (extension_ != null) hash ^= Extension.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Code != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Code);
    }
    if (Message.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Message);
    }
    if (Type.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Type);
    }
    if (extension_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Extension);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Code != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
    }
    if (Message.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
    }
    if (Type.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
    }
    if (extension_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Extension);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ErrorInfo other) {
    if (other == null) {
      return;
    }
    if (other.Code != 0) {
      Code = other.Code;
    }
    if (other.Message.Length != 0) {
      Message = other.Message;
    }
    if (other.Type.Length != 0) {
      Type = other.Type;
    }
    if (other.extension_ != null) {
      if (extension_ == null) {
        extension_ = new global::Extension();
      }
      Extension.MergeFrom(other.Extension);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Code = input.ReadInt32();
          break;
        }
        case 18: {
          Message = input.ReadString();
          break;
        }
        case 26: {
          Type = input.ReadString();
          break;
        }
        case 34: {
          if (extension_ == null) {
            extension_ = new global::Extension();
          }
          input.ReadMessage(extension_);
          break;
        }
      }
    }
  }

}

public sealed partial class Setting : pb::IMessage<Setting> {
  private static readonly pb::MessageParser<Setting> _parser = new pb::MessageParser<Setting>(() => new Setting());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Setting> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::McsPbReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Setting() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Setting(Setting other) : this() {
    name_ = other.name_;
    value_ = other.value_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Setting Clone() {
    return new Setting(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 2;
  private string value_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Value {
    get { return value_; }
    set {
      value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Setting);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Setting other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Value != other.Value) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Value.Length != 0) hash ^= Value.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Value.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Value);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Value.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Setting other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Value.Length != 0) {
      Value = other.Value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          Value = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class HeartbeatStat : pb::IMessage<HeartbeatStat> {
  private static readonly pb::MessageParser<HeartbeatStat> _parser = new pb::MessageParser<HeartbeatStat>(() => new HeartbeatStat());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HeartbeatStat> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::McsPbReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeartbeatStat() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeartbeatStat(HeartbeatStat other) : this() {
    ip_ = other.ip_;
    timeout_ = other.timeout_;
    intervalMs_ = other.intervalMs_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeartbeatStat Clone() {
    return new HeartbeatStat(this);
  }

  /// <summary>Field number for the "ip" field.</summary>
  public const int IpFieldNumber = 1;
  private string ip_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Ip {
    get { return ip_; }
    set {
      ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "timeout" field.</summary>
  public const int TimeoutFieldNumber = 2;
  private bool timeout_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Timeout {
    get { return timeout_; }
    set {
      timeout_ = value;
    }
  }

  /// <summary>Field number for the "interval_ms" field.</summary>
  public const int IntervalMsFieldNumber = 3;
  private int intervalMs_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IntervalMs {
    get { return intervalMs_; }
    set {
      intervalMs_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HeartbeatStat);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HeartbeatStat other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Ip != other.Ip) return false;
    if (Timeout != other.Timeout) return false;
    if (IntervalMs != other.IntervalMs) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Ip.Length != 0) hash ^= Ip.GetHashCode();
    if (Timeout != false) hash ^= Timeout.GetHashCode();
    if (IntervalMs != 0) hash ^= IntervalMs.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Ip.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Ip);
    }
    if (Timeout != false) {
      output.WriteRawTag(16);
      output.WriteBool(Timeout);
    }
    if (IntervalMs != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(IntervalMs);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Ip.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
    }
    if (Timeout != false) {
      size += 1 + 1;
    }
    if (IntervalMs != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntervalMs);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HeartbeatStat other) {
    if (other == null) {
      return;
    }
    if (other.Ip.Length != 0) {
      Ip = other.Ip;
    }
    if (other.Timeout != false) {
      Timeout = other.Timeout;
    }
    if (other.IntervalMs != 0) {
      IntervalMs = other.IntervalMs;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Ip = input.ReadString();
          break;
        }
        case 16: {
          Timeout = input.ReadBool();
          break;
        }
        case 24: {
          IntervalMs = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class HeartbeatConfig : pb::IMessage<HeartbeatConfig> {
  private static readonly pb::MessageParser<HeartbeatConfig> _parser = new pb::MessageParser<HeartbeatConfig>(() => new HeartbeatConfig());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HeartbeatConfig> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::McsPbReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeartbeatConfig() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeartbeatConfig(HeartbeatConfig other) : this() {
    uploadStat_ = other.uploadStat_;
    ip_ = other.ip_;
    intervalMs_ = other.intervalMs_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeartbeatConfig Clone() {
    return new HeartbeatConfig(this);
  }

  /// <summary>Field number for the "upload_stat" field.</summary>
  public const int UploadStatFieldNumber = 1;
  private bool uploadStat_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool UploadStat {
    get { return uploadStat_; }
    set {
      uploadStat_ = value;
    }
  }

  /// <summary>Field number for the "ip" field.</summary>
  public const int IpFieldNumber = 2;
  private string ip_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Ip {
    get { return ip_; }
    set {
      ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "interval_ms" field.</summary>
  public const int IntervalMsFieldNumber = 3;
  private int intervalMs_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IntervalMs {
    get { return intervalMs_; }
    set {
      intervalMs_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HeartbeatConfig);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HeartbeatConfig other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UploadStat != other.UploadStat) return false;
    if (Ip != other.Ip) return false;
    if (IntervalMs != other.IntervalMs) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UploadStat != false) hash ^= UploadStat.GetHashCode();
    if (Ip.Length != 0) hash ^= Ip.GetHashCode();
    if (IntervalMs != 0) hash ^= IntervalMs.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UploadStat != false) {
      output.WriteRawTag(8);
      output.WriteBool(UploadStat);
    }
    if (Ip.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Ip);
    }
    if (IntervalMs != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(IntervalMs);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UploadStat != false) {
      size += 1 + 1;
    }
    if (Ip.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
    }
    if (IntervalMs != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntervalMs);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HeartbeatConfig other) {
    if (other == null) {
      return;
    }
    if (other.UploadStat != false) {
      UploadStat = other.UploadStat;
    }
    if (other.Ip.Length != 0) {
      Ip = other.Ip;
    }
    if (other.IntervalMs != 0) {
      IntervalMs = other.IntervalMs;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UploadStat = input.ReadBool();
          break;
        }
        case 18: {
          Ip = input.ReadString();
          break;
        }
        case 24: {
          IntervalMs = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///*
///TAG: 2
/// </summary>
public sealed partial class LoginRequest : pb::IMessage<LoginRequest> {
  private static readonly pb::MessageParser<LoginRequest> _parser = new pb::MessageParser<LoginRequest>(() => new LoginRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LoginRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::McsPbReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginRequest(LoginRequest other) : this() {
    id_ = other.id_;
    domain_ = other.domain_;
    user_ = other.user_;
    resource_ = other.resource_;
    authToken_ = other.authToken_;
    deviceId_ = other.deviceId_;
    lastRmqId_ = other.lastRmqId_;
    setting_ = other.setting_.Clone();
    compress_ = other.compress_;
    receivedPersistentId_ = other.receivedPersistentId_.Clone();
    includeStreamIds_ = other.includeStreamIds_;
    adaptiveHeartbeat_ = other.adaptiveHeartbeat_;
    HeartbeatStat = other.heartbeatStat_ != null ? other.HeartbeatStat.Clone() : null;
    useRmq2_ = other.useRmq2_;
    accountId_ = other.accountId_;
    authService_ = other.authService_;
    networkType_ = other.networkType_;
    status_ = other.status_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginRequest Clone() {
    return new LoginRequest(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  /// <summary>
  /// Must be present ( proto ), may be empty
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "domain" field.</summary>
  public const int DomainFieldNumber = 2;
  private string domain_ = "";
  /// <summary>
  /// string.
  /// mcs.android.com.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Domain {
    get { return domain_; }
    set {
      domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "user" field.</summary>
  public const int UserFieldNumber = 3;
  private string user_ = "";
  /// <summary>
  /// Decimal android ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string User {
    get { return user_; }
    set {
      user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "resource" field.</summary>
  public const int ResourceFieldNumber = 4;
  private string resource_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Resource {
    get { return resource_; }
    set {
      resource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "auth_token" field.</summary>
  public const int AuthTokenFieldNumber = 5;
  private string authToken_ = "";
  /// <summary>
  /// Secret
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AuthToken {
    get { return authToken_; }
    set {
      authToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "device_id" field.</summary>
  public const int DeviceIdFieldNumber = 6;
  private string deviceId_ = "";
  /// <summary>
  /// Format is: android-HEX_DEVICE_ID
  /// The user is the decimal value.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "last_rmq_id" field.</summary>
  public const int LastRmqIdFieldNumber = 7;
  private long lastRmqId_;
  /// <summary>
  /// RMQ1 - no longer used
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LastRmqId {
    get { return lastRmqId_; }
    set {
      lastRmqId_ = value;
    }
  }

  /// <summary>Field number for the "setting" field.</summary>
  public const int SettingFieldNumber = 8;
  private static readonly pb::FieldCodec<global::Setting> _repeated_setting_codec
      = pb::FieldCodec.ForMessage(66, global::Setting.Parser);
  private readonly pbc::RepeatedField<global::Setting> setting_ = new pbc::RepeatedField<global::Setting>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Setting> Setting {
    get { return setting_; }
  }

  /// <summary>Field number for the "compress" field.</summary>
  public const int CompressFieldNumber = 9;
  private int compress_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Compress {
    get { return compress_; }
    set {
      compress_ = value;
    }
  }

  /// <summary>Field number for the "received_persistent_id" field.</summary>
  public const int ReceivedPersistentIdFieldNumber = 10;
  private static readonly pb::FieldCodec<string> _repeated_receivedPersistentId_codec
      = pb::FieldCodec.ForString(82);
  private readonly pbc::RepeatedField<string> receivedPersistentId_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> ReceivedPersistentId {
    get { return receivedPersistentId_; }
  }

  /// <summary>Field number for the "include_stream_ids" field.</summary>
  public const int IncludeStreamIdsFieldNumber = 11;
  private bool includeStreamIds_;
  /// <summary>
  /// Replaced by "rmq2v" setting
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IncludeStreamIds {
    get { return includeStreamIds_; }
    set {
      includeStreamIds_ = value;
    }
  }

  /// <summary>Field number for the "adaptive_heartbeat" field.</summary>
  public const int AdaptiveHeartbeatFieldNumber = 12;
  private bool adaptiveHeartbeat_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool AdaptiveHeartbeat {
    get { return adaptiveHeartbeat_; }
    set {
      adaptiveHeartbeat_ = value;
    }
  }

  /// <summary>Field number for the "heartbeat_stat" field.</summary>
  public const int HeartbeatStatFieldNumber = 13;
  private global::HeartbeatStat heartbeatStat_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::HeartbeatStat HeartbeatStat {
    get { return heartbeatStat_; }
    set {
      heartbeatStat_ = value;
    }
  }

  /// <summary>Field number for the "use_rmq2" field.</summary>
  public const int UseRmq2FieldNumber = 14;
  private bool useRmq2_;
  /// <summary>
  /// Must be true.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool UseRmq2 {
    get { return useRmq2_; }
    set {
      useRmq2_ = value;
    }
  }

  /// <summary>Field number for the "account_id" field.</summary>
  public const int AccountIdFieldNumber = 15;
  private long accountId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long AccountId {
    get { return accountId_; }
    set {
      accountId_ = value;
    }
  }

  /// <summary>Field number for the "auth_service" field.</summary>
  public const int AuthServiceFieldNumber = 16;
  private global::LoginRequest.Types.AuthService authService_ = 0;
  /// <summary>
  /// ANDROID_ID = 2
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LoginRequest.Types.AuthService AuthService {
    get { return authService_; }
    set {
      authService_ = value;
    }
  }

  /// <summary>Field number for the "network_type" field.</summary>
  public const int NetworkTypeFieldNumber = 17;
  private int networkType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NetworkType {
    get { return networkType_; }
    set {
      networkType_ = value;
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 18;
  private long status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LoginRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LoginRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Domain != other.Domain) return false;
    if (User != other.User) return false;
    if (Resource != other.Resource) return false;
    if (AuthToken != other.AuthToken) return false;
    if (DeviceId != other.DeviceId) return false;
    if (LastRmqId != other.LastRmqId) return false;
    if(!setting_.Equals(other.setting_)) return false;
    if (Compress != other.Compress) return false;
    if(!receivedPersistentId_.Equals(other.receivedPersistentId_)) return false;
    if (IncludeStreamIds != other.IncludeStreamIds) return false;
    if (AdaptiveHeartbeat != other.AdaptiveHeartbeat) return false;
    if (!object.Equals(HeartbeatStat, other.HeartbeatStat)) return false;
    if (UseRmq2 != other.UseRmq2) return false;
    if (AccountId != other.AccountId) return false;
    if (AuthService != other.AuthService) return false;
    if (NetworkType != other.NetworkType) return false;
    if (Status != other.Status) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Domain.Length != 0) hash ^= Domain.GetHashCode();
    if (User.Length != 0) hash ^= User.GetHashCode();
    if (Resource.Length != 0) hash ^= Resource.GetHashCode();
    if (AuthToken.Length != 0) hash ^= AuthToken.GetHashCode();
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (LastRmqId != 0L) hash ^= LastRmqId.GetHashCode();
    hash ^= setting_.GetHashCode();
    if (Compress != 0) hash ^= Compress.GetHashCode();
    hash ^= receivedPersistentId_.GetHashCode();
    if (IncludeStreamIds != false) hash ^= IncludeStreamIds.GetHashCode();
    if (AdaptiveHeartbeat != false) hash ^= AdaptiveHeartbeat.GetHashCode();
    if (heartbeatStat_ != null) hash ^= HeartbeatStat.GetHashCode();
    if (UseRmq2 != false) hash ^= UseRmq2.GetHashCode();
    if (AccountId != 0L) hash ^= AccountId.GetHashCode();
    if (AuthService != 0) hash ^= AuthService.GetHashCode();
    if (NetworkType != 0) hash ^= NetworkType.GetHashCode();
    if (Status != 0L) hash ^= Status.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Domain.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Domain);
    }
    if (User.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(User);
    }
    if (Resource.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Resource);
    }
    if (AuthToken.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(AuthToken);
    }
    if (DeviceId.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(DeviceId);
    }
    if (LastRmqId != 0L) {
      output.WriteRawTag(56);
      output.WriteInt64(LastRmqId);
    }
    setting_.WriteTo(output, _repeated_setting_codec);
    if (Compress != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(Compress);
    }
    receivedPersistentId_.WriteTo(output, _repeated_receivedPersistentId_codec);
    if (IncludeStreamIds != false) {
      output.WriteRawTag(88);
      output.WriteBool(IncludeStreamIds);
    }
    if (AdaptiveHeartbeat != false) {
      output.WriteRawTag(96);
      output.WriteBool(AdaptiveHeartbeat);
    }
    if (heartbeatStat_ != null) {
      output.WriteRawTag(106);
      output.WriteMessage(HeartbeatStat);
    }
    if (UseRmq2 != false) {
      output.WriteRawTag(112);
      output.WriteBool(UseRmq2);
    }
    if (AccountId != 0L) {
      output.WriteRawTag(120);
      output.WriteInt64(AccountId);
    }
    if (AuthService != 0) {
      output.WriteRawTag(128, 1);
      output.WriteEnum((int) AuthService);
    }
    if (NetworkType != 0) {
      output.WriteRawTag(136, 1);
      output.WriteInt32(NetworkType);
    }
    if (Status != 0L) {
      output.WriteRawTag(144, 1);
      output.WriteInt64(Status);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Domain.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
    }
    if (User.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
    }
    if (Resource.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Resource);
    }
    if (AuthToken.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthToken);
    }
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (LastRmqId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastRmqId);
    }
    size += setting_.CalculateSize(_repeated_setting_codec);
    if (Compress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Compress);
    }
    size += receivedPersistentId_.CalculateSize(_repeated_receivedPersistentId_codec);
    if (IncludeStreamIds != false) {
      size += 1 + 1;
    }
    if (AdaptiveHeartbeat != false) {
      size += 1 + 1;
    }
    if (heartbeatStat_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(HeartbeatStat);
    }
    if (UseRmq2 != false) {
      size += 1 + 1;
    }
    if (AccountId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountId);
    }
    if (AuthService != 0) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AuthService);
    }
    if (NetworkType != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(NetworkType);
    }
    if (Status != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(Status);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LoginRequest other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Domain.Length != 0) {
      Domain = other.Domain;
    }
    if (other.User.Length != 0) {
      User = other.User;
    }
    if (other.Resource.Length != 0) {
      Resource = other.Resource;
    }
    if (other.AuthToken.Length != 0) {
      AuthToken = other.AuthToken;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.LastRmqId != 0L) {
      LastRmqId = other.LastRmqId;
    }
    setting_.Add(other.setting_);
    if (other.Compress != 0) {
      Compress = other.Compress;
    }
    receivedPersistentId_.Add(other.receivedPersistentId_);
    if (other.IncludeStreamIds != false) {
      IncludeStreamIds = other.IncludeStreamIds;
    }
    if (other.AdaptiveHeartbeat != false) {
      AdaptiveHeartbeat = other.AdaptiveHeartbeat;
    }
    if (other.heartbeatStat_ != null) {
      if (heartbeatStat_ == null) {
        heartbeatStat_ = new global::HeartbeatStat();
      }
      HeartbeatStat.MergeFrom(other.HeartbeatStat);
    }
    if (other.UseRmq2 != false) {
      UseRmq2 = other.UseRmq2;
    }
    if (other.AccountId != 0L) {
      AccountId = other.AccountId;
    }
    if (other.AuthService != 0) {
      AuthService = other.AuthService;
    }
    if (other.NetworkType != 0) {
      NetworkType = other.NetworkType;
    }
    if (other.Status != 0L) {
      Status = other.Status;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Domain = input.ReadString();
          break;
        }
        case 26: {
          User = input.ReadString();
          break;
        }
        case 34: {
          Resource = input.ReadString();
          break;
        }
        case 42: {
          AuthToken = input.ReadString();
          break;
        }
        case 50: {
          DeviceId = input.ReadString();
          break;
        }
        case 56: {
          LastRmqId = input.ReadInt64();
          break;
        }
        case 66: {
          setting_.AddEntriesFrom(input, _repeated_setting_codec);
          break;
        }
        case 72: {
          Compress = input.ReadInt32();
          break;
        }
        case 82: {
          receivedPersistentId_.AddEntriesFrom(input, _repeated_receivedPersistentId_codec);
          break;
        }
        case 88: {
          IncludeStreamIds = input.ReadBool();
          break;
        }
        case 96: {
          AdaptiveHeartbeat = input.ReadBool();
          break;
        }
        case 106: {
          if (heartbeatStat_ == null) {
            heartbeatStat_ = new global::HeartbeatStat();
          }
          input.ReadMessage(heartbeatStat_);
          break;
        }
        case 112: {
          UseRmq2 = input.ReadBool();
          break;
        }
        case 120: {
          AccountId = input.ReadInt64();
          break;
        }
        case 128: {
          authService_ = (global::LoginRequest.Types.AuthService) input.ReadEnum();
          break;
        }
        case 136: {
          NetworkType = input.ReadInt32();
          break;
        }
        case 144: {
          Status = input.ReadInt64();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the LoginRequest message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum AuthService {
      [pbr::OriginalName("test")] Test = 0,
      [pbr::OriginalName("ANDROID_ID")] AndroidId = 2,
    }

  }
  #endregion

}

/// <summary>
///*
/// TAG: 3
/// </summary>
public sealed partial class LoginResponse : pb::IMessage<LoginResponse> {
  private static readonly pb::MessageParser<LoginResponse> _parser = new pb::MessageParser<LoginResponse>(() => new LoginResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LoginResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::McsPbReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginResponse(LoginResponse other) : this() {
    id_ = other.id_;
    jid_ = other.jid_;
    Error = other.error_ != null ? other.Error.Clone() : null;
    setting_ = other.setting_.Clone();
    streamId_ = other.streamId_;
    lastStreamIdReceived_ = other.lastStreamIdReceived_;
    HeartbeatConfig = other.heartbeatConfig_ != null ? other.HeartbeatConfig.Clone() : null;
    serverTimestamp_ = other.serverTimestamp_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginResponse Clone() {
    return new LoginResponse(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "jid" field.</summary>
  public const int JidFieldNumber = 2;
  private string jid_ = "";
  /// <summary>
  /// Not used.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Jid {
    get { return jid_; }
    set {
      jid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "error" field.</summary>
  public const int ErrorFieldNumber = 3;
  private global::ErrorInfo error_;
  /// <summary>
  /// Null if login was ok.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorInfo Error {
    get { return error_; }
    set {
      error_ = value;
    }
  }

  /// <summary>Field number for the "setting" field.</summary>
  public const int SettingFieldNumber = 4;
  private static readonly pb::FieldCodec<global::Setting> _repeated_setting_codec
      = pb::FieldCodec.ForMessage(34, global::Setting.Parser);
  private readonly pbc::RepeatedField<global::Setting> setting_ = new pbc::RepeatedField<global::Setting>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Setting> Setting {
    get { return setting_; }
  }

  /// <summary>Field number for the "stream_id" field.</summary>
  public const int StreamIdFieldNumber = 5;
  private int streamId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StreamId {
    get { return streamId_; }
    set {
      streamId_ = value;
    }
  }

  /// <summary>Field number for the "last_stream_id_received" field.</summary>
  public const int LastStreamIdReceivedFieldNumber = 6;
  private int lastStreamIdReceived_;
  /// <summary>
  /// Should be "1"
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LastStreamIdReceived {
    get { return lastStreamIdReceived_; }
    set {
      lastStreamIdReceived_ = value;
    }
  }

  /// <summary>Field number for the "heartbeat_config" field.</summary>
  public const int HeartbeatConfigFieldNumber = 7;
  private global::HeartbeatConfig heartbeatConfig_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::HeartbeatConfig HeartbeatConfig {
    get { return heartbeatConfig_; }
    set {
      heartbeatConfig_ = value;
    }
  }

  /// <summary>Field number for the "server_timestamp" field.</summary>
  public const int ServerTimestampFieldNumber = 8;
  private long serverTimestamp_;
  /// <summary>
  /// used by the client to synchronize with the server timestamp.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ServerTimestamp {
    get { return serverTimestamp_; }
    set {
      serverTimestamp_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LoginResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LoginResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Jid != other.Jid) return false;
    if (!object.Equals(Error, other.Error)) return false;
    if(!setting_.Equals(other.setting_)) return false;
    if (StreamId != other.StreamId) return false;
    if (LastStreamIdReceived != other.LastStreamIdReceived) return false;
    if (!object.Equals(HeartbeatConfig, other.HeartbeatConfig)) return false;
    if (ServerTimestamp != other.ServerTimestamp) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Jid.Length != 0) hash ^= Jid.GetHashCode();
    if (error_ != null) hash ^= Error.GetHashCode();
    hash ^= setting_.GetHashCode();
    if (StreamId != 0) hash ^= StreamId.GetHashCode();
    if (LastStreamIdReceived != 0) hash ^= LastStreamIdReceived.GetHashCode();
    if (heartbeatConfig_ != null) hash ^= HeartbeatConfig.GetHashCode();
    if (ServerTimestamp != 0L) hash ^= ServerTimestamp.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Jid.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Jid);
    }
    if (error_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Error);
    }
    setting_.WriteTo(output, _repeated_setting_codec);
    if (StreamId != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(StreamId);
    }
    if (LastStreamIdReceived != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(LastStreamIdReceived);
    }
    if (heartbeatConfig_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(HeartbeatConfig);
    }
    if (ServerTimestamp != 0L) {
      output.WriteRawTag(64);
      output.WriteInt64(ServerTimestamp);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Jid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Jid);
    }
    if (error_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
    }
    size += setting_.CalculateSize(_repeated_setting_codec);
    if (StreamId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StreamId);
    }
    if (LastStreamIdReceived != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastStreamIdReceived);
    }
    if (heartbeatConfig_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(HeartbeatConfig);
    }
    if (ServerTimestamp != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerTimestamp);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LoginResponse other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Jid.Length != 0) {
      Jid = other.Jid;
    }
    if (other.error_ != null) {
      if (error_ == null) {
        error_ = new global::ErrorInfo();
      }
      Error.MergeFrom(other.Error);
    }
    setting_.Add(other.setting_);
    if (other.StreamId != 0) {
      StreamId = other.StreamId;
    }
    if (other.LastStreamIdReceived != 0) {
      LastStreamIdReceived = other.LastStreamIdReceived;
    }
    if (other.heartbeatConfig_ != null) {
      if (heartbeatConfig_ == null) {
        heartbeatConfig_ = new global::HeartbeatConfig();
      }
      HeartbeatConfig.MergeFrom(other.HeartbeatConfig);
    }
    if (other.ServerTimestamp != 0L) {
      ServerTimestamp = other.ServerTimestamp;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Jid = input.ReadString();
          break;
        }
        case 26: {
          if (error_ == null) {
            error_ = new global::ErrorInfo();
          }
          input.ReadMessage(error_);
          break;
        }
        case 34: {
          setting_.AddEntriesFrom(input, _repeated_setting_codec);
          break;
        }
        case 40: {
          StreamId = input.ReadInt32();
          break;
        }
        case 48: {
          LastStreamIdReceived = input.ReadInt32();
          break;
        }
        case 58: {
          if (heartbeatConfig_ == null) {
            heartbeatConfig_ = new global::HeartbeatConfig();
          }
          input.ReadMessage(heartbeatConfig_);
          break;
        }
        case 64: {
          ServerTimestamp = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class StreamErrorStanza : pb::IMessage<StreamErrorStanza> {
  private static readonly pb::MessageParser<StreamErrorStanza> _parser = new pb::MessageParser<StreamErrorStanza>(() => new StreamErrorStanza());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<StreamErrorStanza> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::McsPbReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StreamErrorStanza() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StreamErrorStanza(StreamErrorStanza other) : this() {
    type_ = other.type_;
    text_ = other.text_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StreamErrorStanza Clone() {
    return new StreamErrorStanza(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private string type_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Type {
    get { return type_; }
    set {
      type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "text" field.</summary>
  public const int TextFieldNumber = 2;
  private string text_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Text {
    get { return text_; }
    set {
      text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as StreamErrorStanza);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(StreamErrorStanza other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Text != other.Text) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type.Length != 0) hash ^= Type.GetHashCode();
    if (Text.Length != 0) hash ^= Text.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Type);
    }
    if (Text.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Text);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
    }
    if (Text.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(StreamErrorStanza other) {
    if (other == null) {
      return;
    }
    if (other.Type.Length != 0) {
      Type = other.Type;
    }
    if (other.Text.Length != 0) {
      Text = other.Text;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Type = input.ReadString();
          break;
        }
        case 18: {
          Text = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///*
/// TAG: 4
/// </summary>
public sealed partial class Close : pb::IMessage<Close> {
  private static readonly pb::MessageParser<Close> _parser = new pb::MessageParser<Close>(() => new Close());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Close> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::McsPbReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Close() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Close(Close other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Close Clone() {
    return new Close(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Close);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Close other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Close other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class Extension : pb::IMessage<Extension> {
  private static readonly pb::MessageParser<Extension> _parser = new pb::MessageParser<Extension>(() => new Extension());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Extension> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::McsPbReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Extension() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Extension(Extension other) : this() {
    id_ = other.id_;
    data_ = other.data_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Extension Clone() {
    return new Extension(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  /// <summary>
  /// 12: SelectiveAck
  /// 13: StreamAck
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 2;
  private pb::ByteString data_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Extension);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Extension other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Data != other.Data) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Data.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(Data);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Extension other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
  }

}

/// <summary>
///*
/// TAG: 7
/// IqRequest must contain a single extension.  IqResponse may contain 0 or 1
/// extensions.
/// </summary>
public sealed partial class IqStanza : pb::IMessage<IqStanza> {
  private static readonly pb::MessageParser<IqStanza> _parser = new pb::MessageParser<IqStanza>(() => new IqStanza());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<IqStanza> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::McsPbReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IqStanza() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IqStanza(IqStanza other) : this() {
    rmqId_ = other.rmqId_;
    type_ = other.type_;
    id_ = other.id_;
    from_ = other.from_;
    to_ = other.to_;
    Error = other.error_ != null ? other.Error.Clone() : null;
    Extension = other.extension_ != null ? other.Extension.Clone() : null;
    persistentId_ = other.persistentId_;
    streamId_ = other.streamId_;
    lastStreamIdReceived_ = other.lastStreamIdReceived_;
    accountId_ = other.accountId_;
    status_ = other.status_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IqStanza Clone() {
    return new IqStanza(this);
  }

  /// <summary>Field number for the "rmq_id" field.</summary>
  public const int RmqIdFieldNumber = 1;
  private long rmqId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long RmqId {
    get { return rmqId_; }
    set {
      rmqId_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private global::IqStanza.Types.IqType type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::IqStanza.Types.IqType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 3;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "from" field.</summary>
  public const int FromFieldNumber = 4;
  private string from_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string From {
    get { return from_; }
    set {
      from_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "to" field.</summary>
  public const int ToFieldNumber = 5;
  private string to_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string To {
    get { return to_; }
    set {
      to_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "error" field.</summary>
  public const int ErrorFieldNumber = 6;
  private global::ErrorInfo error_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorInfo Error {
    get { return error_; }
    set {
      error_ = value;
    }
  }

  /// <summary>Field number for the "extension" field.</summary>
  public const int ExtensionFieldNumber = 7;
  private global::Extension extension_;
  /// <summary>
  /// Only field used in the 38+ protocol (besides common last_stream_id_received, status, rmq_id)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Extension Extension {
    get { return extension_; }
    set {
      extension_ = value;
    }
  }

  /// <summary>Field number for the "persistent_id" field.</summary>
  public const int PersistentIdFieldNumber = 8;
  private string persistentId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PersistentId {
    get { return persistentId_; }
    set {
      persistentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "stream_id" field.</summary>
  public const int StreamIdFieldNumber = 9;
  private int streamId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StreamId {
    get { return streamId_; }
    set {
      streamId_ = value;
    }
  }

  /// <summary>Field number for the "last_stream_id_received" field.</summary>
  public const int LastStreamIdReceivedFieldNumber = 10;
  private int lastStreamIdReceived_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LastStreamIdReceived {
    get { return lastStreamIdReceived_; }
    set {
      lastStreamIdReceived_ = value;
    }
  }

  /// <summary>Field number for the "account_id" field.</summary>
  public const int AccountIdFieldNumber = 11;
  private long accountId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long AccountId {
    get { return accountId_; }
    set {
      accountId_ = value;
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 12;
  private long status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as IqStanza);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(IqStanza other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RmqId != other.RmqId) return false;
    if (Type != other.Type) return false;
    if (Id != other.Id) return false;
    if (From != other.From) return false;
    if (To != other.To) return false;
    if (!object.Equals(Error, other.Error)) return false;
    if (!object.Equals(Extension, other.Extension)) return false;
    if (PersistentId != other.PersistentId) return false;
    if (StreamId != other.StreamId) return false;
    if (LastStreamIdReceived != other.LastStreamIdReceived) return false;
    if (AccountId != other.AccountId) return false;
    if (Status != other.Status) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RmqId != 0L) hash ^= RmqId.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (From.Length != 0) hash ^= From.GetHashCode();
    if (To.Length != 0) hash ^= To.GetHashCode();
    if (error_ != null) hash ^= Error.GetHashCode();
    if (extension_ != null) hash ^= Extension.GetHashCode();
    if (PersistentId.Length != 0) hash ^= PersistentId.GetHashCode();
    if (StreamId != 0) hash ^= StreamId.GetHashCode();
    if (LastStreamIdReceived != 0) hash ^= LastStreamIdReceived.GetHashCode();
    if (AccountId != 0L) hash ^= AccountId.GetHashCode();
    if (Status != 0L) hash ^= Status.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RmqId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(RmqId);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Type);
    }
    if (Id.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Id);
    }
    if (From.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(From);
    }
    if (To.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(To);
    }
    if (error_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Error);
    }
    if (extension_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(Extension);
    }
    if (PersistentId.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(PersistentId);
    }
    if (StreamId != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(StreamId);
    }
    if (LastStreamIdReceived != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(LastStreamIdReceived);
    }
    if (AccountId != 0L) {
      output.WriteRawTag(88);
      output.WriteInt64(AccountId);
    }
    if (Status != 0L) {
      output.WriteRawTag(96);
      output.WriteInt64(Status);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RmqId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(RmqId);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (From.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
    }
    if (To.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(To);
    }
    if (error_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
    }
    if (extension_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Extension);
    }
    if (PersistentId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PersistentId);
    }
    if (StreamId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StreamId);
    }
    if (LastStreamIdReceived != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastStreamIdReceived);
    }
    if (AccountId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountId);
    }
    if (Status != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Status);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(IqStanza other) {
    if (other == null) {
      return;
    }
    if (other.RmqId != 0L) {
      RmqId = other.RmqId;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.From.Length != 0) {
      From = other.From;
    }
    if (other.To.Length != 0) {
      To = other.To;
    }
    if (other.error_ != null) {
      if (error_ == null) {
        error_ = new global::ErrorInfo();
      }
      Error.MergeFrom(other.Error);
    }
    if (other.extension_ != null) {
      if (extension_ == null) {
        extension_ = new global::Extension();
      }
      Extension.MergeFrom(other.Extension);
    }
    if (other.PersistentId.Length != 0) {
      PersistentId = other.PersistentId;
    }
    if (other.StreamId != 0) {
      StreamId = other.StreamId;
    }
    if (other.LastStreamIdReceived != 0) {
      LastStreamIdReceived = other.LastStreamIdReceived;
    }
    if (other.AccountId != 0L) {
      AccountId = other.AccountId;
    }
    if (other.Status != 0L) {
      Status = other.Status;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RmqId = input.ReadInt64();
          break;
        }
        case 16: {
          type_ = (global::IqStanza.Types.IqType) input.ReadEnum();
          break;
        }
        case 26: {
          Id = input.ReadString();
          break;
        }
        case 34: {
          From = input.ReadString();
          break;
        }
        case 42: {
          To = input.ReadString();
          break;
        }
        case 50: {
          if (error_ == null) {
            error_ = new global::ErrorInfo();
          }
          input.ReadMessage(error_);
          break;
        }
        case 58: {
          if (extension_ == null) {
            extension_ = new global::Extension();
          }
          input.ReadMessage(extension_);
          break;
        }
        case 66: {
          PersistentId = input.ReadString();
          break;
        }
        case 72: {
          StreamId = input.ReadInt32();
          break;
        }
        case 80: {
          LastStreamIdReceived = input.ReadInt32();
          break;
        }
        case 88: {
          AccountId = input.ReadInt64();
          break;
        }
        case 96: {
          Status = input.ReadInt64();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the IqStanza message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum IqType {
      [pbr::OriginalName("GET")] Get = 0,
      [pbr::OriginalName("SET")] Set = 1,
      [pbr::OriginalName("RESULT")] Result = 2,
      [pbr::OriginalName("IQ_ERROR")] IqError = 3,
    }

  }
  #endregion

}

public sealed partial class AppData : pb::IMessage<AppData> {
  private static readonly pb::MessageParser<AppData> _parser = new pb::MessageParser<AppData>(() => new AppData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AppData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::McsPbReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AppData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AppData(AppData other) : this() {
    key_ = other.key_;
    value_ = other.value_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AppData Clone() {
    return new AppData(this);
  }

  /// <summary>Field number for the "key" field.</summary>
  public const int KeyFieldNumber = 1;
  private string key_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Key {
    get { return key_; }
    set {
      key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 2;
  private string value_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Value {
    get { return value_; }
    set {
      value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AppData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AppData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Key != other.Key) return false;
    if (Value != other.Value) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Key.Length != 0) hash ^= Key.GetHashCode();
    if (Value.Length != 0) hash ^= Value.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Key.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Key);
    }
    if (Value.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Value);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Key.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
    }
    if (Value.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AppData other) {
    if (other == null) {
      return;
    }
    if (other.Key.Length != 0) {
      Key = other.Key;
    }
    if (other.Value.Length != 0) {
      Value = other.Value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Key = input.ReadString();
          break;
        }
        case 18: {
          Value = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///*
/// TAG: 8
/// </summary>
public sealed partial class DataMessageStanza : pb::IMessage<DataMessageStanza> {
  private static readonly pb::MessageParser<DataMessageStanza> _parser = new pb::MessageParser<DataMessageStanza>(() => new DataMessageStanza());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DataMessageStanza> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::McsPbReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataMessageStanza() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataMessageStanza(DataMessageStanza other) : this() {
    rmqId_ = other.rmqId_;
    id_ = other.id_;
    from_ = other.from_;
    to_ = other.to_;
    category_ = other.category_;
    token_ = other.token_;
    appData_ = other.appData_.Clone();
    fromTrustedServer_ = other.fromTrustedServer_;
    persistentId_ = other.persistentId_;
    streamId_ = other.streamId_;
    lastStreamIdReceived_ = other.lastStreamIdReceived_;
    permission_ = other.permission_;
    regId_ = other.regId_;
    pkgSignature_ = other.pkgSignature_;
    clientId_ = other.clientId_;
    deviceUserId_ = other.deviceUserId_;
    ttl_ = other.ttl_;
    sent_ = other.sent_;
    queued_ = other.queued_;
    status_ = other.status_;
    rawData_ = other.rawData_;
    delay_ = other.delay_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataMessageStanza Clone() {
    return new DataMessageStanza(this);
  }

  /// <summary>Field number for the "rmq_id" field.</summary>
  public const int RmqIdFieldNumber = 1;
  private long rmqId_;
  /// <summary>
  /// Not used.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long RmqId {
    get { return rmqId_; }
    set {
      rmqId_ = value;
    }
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 2;
  private string id_ = "";
  /// <summary>
  /// This is the message ID, set by client, DMP.9 (message_id)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "from" field.</summary>
  public const int FromFieldNumber = 3;
  private string from_ = "";
  /// <summary>
  /// Project ID of the sender, DMP.1
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string From {
    get { return from_; }
    set {
      from_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "to" field.</summary>
  public const int ToFieldNumber = 4;
  private string to_ = "";
  /// <summary>
  /// Part of DMRequest - also the key in DataMessageProto.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string To {
    get { return to_; }
    set {
      to_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "category" field.</summary>
  public const int CategoryFieldNumber = 5;
  private string category_ = "";
  /// <summary>
  /// Package name. DMP.2
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Category {
    get { return category_; }
    set {
      category_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "token" field.</summary>
  public const int TokenFieldNumber = 6;
  private string token_ = "";
  /// <summary>
  /// The collapsed key, DMP.3
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Token {
    get { return token_; }
    set {
      token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "app_data" field.</summary>
  public const int AppDataFieldNumber = 7;
  private static readonly pb::FieldCodec<global::AppData> _repeated_appData_codec
      = pb::FieldCodec.ForMessage(58, global::AppData.Parser);
  private readonly pbc::RepeatedField<global::AppData> appData_ = new pbc::RepeatedField<global::AppData>();
  /// <summary>
  /// User data + GOOGLE. prefixed special entries, DMP.4
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::AppData> AppData {
    get { return appData_; }
  }

  /// <summary>Field number for the "from_trusted_server" field.</summary>
  public const int FromTrustedServerFieldNumber = 8;
  private bool fromTrustedServer_;
  /// <summary>
  /// Not used.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool FromTrustedServer {
    get { return fromTrustedServer_; }
    set {
      fromTrustedServer_ = value;
    }
  }

  /// <summary>Field number for the "persistent_id" field.</summary>
  public const int PersistentIdFieldNumber = 9;
  private string persistentId_ = "";
  /// <summary>
  /// Part of the ACK protocol, returned in DataMessageResponse on server side.
  /// It's part of the key of DMP.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PersistentId {
    get { return persistentId_; }
    set {
      persistentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "stream_id" field.</summary>
  public const int StreamIdFieldNumber = 10;
  private int streamId_;
  /// <summary>
  /// In-stream ack. Increments on each message sent - a bit redundant
  /// Not used in DMP/DMR.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StreamId {
    get { return streamId_; }
    set {
      streamId_ = value;
    }
  }

  /// <summary>Field number for the "last_stream_id_received" field.</summary>
  public const int LastStreamIdReceivedFieldNumber = 11;
  private int lastStreamIdReceived_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LastStreamIdReceived {
    get { return lastStreamIdReceived_; }
    set {
      lastStreamIdReceived_ = value;
    }
  }

  /// <summary>Field number for the "permission" field.</summary>
  public const int PermissionFieldNumber = 12;
  private string permission_ = "";
  /// <summary>
  /// Not used.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Permission {
    get { return permission_; }
    set {
      permission_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "reg_id" field.</summary>
  public const int RegIdFieldNumber = 13;
  private string regId_ = "";
  /// <summary>
  /// Sent by the device shortly after registration.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RegId {
    get { return regId_; }
    set {
      regId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "pkg_signature" field.</summary>
  public const int PkgSignatureFieldNumber = 14;
  private string pkgSignature_ = "";
  /// <summary>
  /// Not used.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PkgSignature {
    get { return pkgSignature_; }
    set {
      pkgSignature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "client_id" field.</summary>
  public const int ClientIdFieldNumber = 15;
  private string clientId_ = "";
  /// <summary>
  /// Not used.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ClientId {
    get { return clientId_; }
    set {
      clientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "device_user_id" field.</summary>
  public const int DeviceUserIdFieldNumber = 16;
  private long deviceUserId_;
  /// <summary>
  /// serial number of the target user, DMP.8
  /// It is the 'serial number' according to user manager.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long DeviceUserId {
    get { return deviceUserId_; }
    set {
      deviceUserId_ = value;
    }
  }

  /// <summary>Field number for the "ttl" field.</summary>
  public const int TtlFieldNumber = 17;
  private int ttl_;
  /// <summary>
  /// Time to live, in seconds.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Ttl {
    get { return ttl_; }
    set {
      ttl_ = value;
    }
  }

  /// <summary>Field number for the "sent" field.</summary>
  public const int SentFieldNumber = 18;
  private long sent_;
  /// <summary>
  /// Timestamp ( according to client ) when message was sent by app, in seconds
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Sent {
    get { return sent_; }
    set {
      sent_ = value;
    }
  }

  /// <summary>Field number for the "queued" field.</summary>
  public const int QueuedFieldNumber = 19;
  private int queued_;
  /// <summary>
  /// How long has the message been queued before the flush, in seconds.
  /// This is needed to account for the time difference between server and
  /// client: server should adjust 'sent' based on his 'receive' time.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Queued {
    get { return queued_; }
    set {
      queued_ = value;
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 20;
  private long status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "raw_data" field.</summary>
  public const int RawDataFieldNumber = 21;
  private pb::ByteString rawData_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString RawData {
    get { return rawData_; }
    set {
      rawData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "delay" field.</summary>
  public const int DelayFieldNumber = 22;
  private int delay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Delay {
    get { return delay_; }
    set {
      delay_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DataMessageStanza);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DataMessageStanza other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RmqId != other.RmqId) return false;
    if (Id != other.Id) return false;
    if (From != other.From) return false;
    if (To != other.To) return false;
    if (Category != other.Category) return false;
    if (Token != other.Token) return false;
    if(!appData_.Equals(other.appData_)) return false;
    if (FromTrustedServer != other.FromTrustedServer) return false;
    if (PersistentId != other.PersistentId) return false;
    if (StreamId != other.StreamId) return false;
    if (LastStreamIdReceived != other.LastStreamIdReceived) return false;
    if (Permission != other.Permission) return false;
    if (RegId != other.RegId) return false;
    if (PkgSignature != other.PkgSignature) return false;
    if (ClientId != other.ClientId) return false;
    if (DeviceUserId != other.DeviceUserId) return false;
    if (Ttl != other.Ttl) return false;
    if (Sent != other.Sent) return false;
    if (Queued != other.Queued) return false;
    if (Status != other.Status) return false;
    if (RawData != other.RawData) return false;
    if (Delay != other.Delay) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RmqId != 0L) hash ^= RmqId.GetHashCode();
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (From.Length != 0) hash ^= From.GetHashCode();
    if (To.Length != 0) hash ^= To.GetHashCode();
    if (Category.Length != 0) hash ^= Category.GetHashCode();
    if (Token.Length != 0) hash ^= Token.GetHashCode();
    hash ^= appData_.GetHashCode();
    if (FromTrustedServer != false) hash ^= FromTrustedServer.GetHashCode();
    if (PersistentId.Length != 0) hash ^= PersistentId.GetHashCode();
    if (StreamId != 0) hash ^= StreamId.GetHashCode();
    if (LastStreamIdReceived != 0) hash ^= LastStreamIdReceived.GetHashCode();
    if (Permission.Length != 0) hash ^= Permission.GetHashCode();
    if (RegId.Length != 0) hash ^= RegId.GetHashCode();
    if (PkgSignature.Length != 0) hash ^= PkgSignature.GetHashCode();
    if (ClientId.Length != 0) hash ^= ClientId.GetHashCode();
    if (DeviceUserId != 0L) hash ^= DeviceUserId.GetHashCode();
    if (Ttl != 0) hash ^= Ttl.GetHashCode();
    if (Sent != 0L) hash ^= Sent.GetHashCode();
    if (Queued != 0) hash ^= Queued.GetHashCode();
    if (Status != 0L) hash ^= Status.GetHashCode();
    if (RawData.Length != 0) hash ^= RawData.GetHashCode();
    if (Delay != 0) hash ^= Delay.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RmqId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(RmqId);
    }
    if (Id.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Id);
    }
    if (From.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(From);
    }
    if (To.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(To);
    }
    if (Category.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Category);
    }
    if (Token.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Token);
    }
    appData_.WriteTo(output, _repeated_appData_codec);
    if (FromTrustedServer != false) {
      output.WriteRawTag(64);
      output.WriteBool(FromTrustedServer);
    }
    if (PersistentId.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(PersistentId);
    }
    if (StreamId != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(StreamId);
    }
    if (LastStreamIdReceived != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(LastStreamIdReceived);
    }
    if (Permission.Length != 0) {
      output.WriteRawTag(98);
      output.WriteString(Permission);
    }
    if (RegId.Length != 0) {
      output.WriteRawTag(106);
      output.WriteString(RegId);
    }
    if (PkgSignature.Length != 0) {
      output.WriteRawTag(114);
      output.WriteString(PkgSignature);
    }
    if (ClientId.Length != 0) {
      output.WriteRawTag(122);
      output.WriteString(ClientId);
    }
    if (DeviceUserId != 0L) {
      output.WriteRawTag(128, 1);
      output.WriteInt64(DeviceUserId);
    }
    if (Ttl != 0) {
      output.WriteRawTag(136, 1);
      output.WriteInt32(Ttl);
    }
    if (Sent != 0L) {
      output.WriteRawTag(144, 1);
      output.WriteInt64(Sent);
    }
    if (Queued != 0) {
      output.WriteRawTag(152, 1);
      output.WriteInt32(Queued);
    }
    if (Status != 0L) {
      output.WriteRawTag(160, 1);
      output.WriteInt64(Status);
    }
    if (RawData.Length != 0) {
      output.WriteRawTag(170, 1);
      output.WriteBytes(RawData);
    }
    if (Delay != 0) {
      output.WriteRawTag(176, 1);
      output.WriteInt32(Delay);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RmqId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(RmqId);
    }
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (From.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
    }
    if (To.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(To);
    }
    if (Category.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Category);
    }
    if (Token.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
    }
    size += appData_.CalculateSize(_repeated_appData_codec);
    if (FromTrustedServer != false) {
      size += 1 + 1;
    }
    if (PersistentId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PersistentId);
    }
    if (StreamId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StreamId);
    }
    if (LastStreamIdReceived != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastStreamIdReceived);
    }
    if (Permission.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Permission);
    }
    if (RegId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RegId);
    }
    if (PkgSignature.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PkgSignature);
    }
    if (ClientId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientId);
    }
    if (DeviceUserId != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(DeviceUserId);
    }
    if (Ttl != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(Ttl);
    }
    if (Sent != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(Sent);
    }
    if (Queued != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(Queued);
    }
    if (Status != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(Status);
    }
    if (RawData.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeBytesSize(RawData);
    }
    if (Delay != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(Delay);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DataMessageStanza other) {
    if (other == null) {
      return;
    }
    if (other.RmqId != 0L) {
      RmqId = other.RmqId;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.From.Length != 0) {
      From = other.From;
    }
    if (other.To.Length != 0) {
      To = other.To;
    }
    if (other.Category.Length != 0) {
      Category = other.Category;
    }
    if (other.Token.Length != 0) {
      Token = other.Token;
    }
    appData_.Add(other.appData_);
    if (other.FromTrustedServer != false) {
      FromTrustedServer = other.FromTrustedServer;
    }
    if (other.PersistentId.Length != 0) {
      PersistentId = other.PersistentId;
    }
    if (other.StreamId != 0) {
      StreamId = other.StreamId;
    }
    if (other.LastStreamIdReceived != 0) {
      LastStreamIdReceived = other.LastStreamIdReceived;
    }
    if (other.Permission.Length != 0) {
      Permission = other.Permission;
    }
    if (other.RegId.Length != 0) {
      RegId = other.RegId;
    }
    if (other.PkgSignature.Length != 0) {
      PkgSignature = other.PkgSignature;
    }
    if (other.ClientId.Length != 0) {
      ClientId = other.ClientId;
    }
    if (other.DeviceUserId != 0L) {
      DeviceUserId = other.DeviceUserId;
    }
    if (other.Ttl != 0) {
      Ttl = other.Ttl;
    }
    if (other.Sent != 0L) {
      Sent = other.Sent;
    }
    if (other.Queued != 0) {
      Queued = other.Queued;
    }
    if (other.Status != 0L) {
      Status = other.Status;
    }
    if (other.RawData.Length != 0) {
      RawData = other.RawData;
    }
    if (other.Delay != 0) {
      Delay = other.Delay;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RmqId = input.ReadInt64();
          break;
        }
        case 18: {
          Id = input.ReadString();
          break;
        }
        case 26: {
          From = input.ReadString();
          break;
        }
        case 34: {
          To = input.ReadString();
          break;
        }
        case 42: {
          Category = input.ReadString();
          break;
        }
        case 50: {
          Token = input.ReadString();
          break;
        }
        case 58: {
          appData_.AddEntriesFrom(input, _repeated_appData_codec);
          break;
        }
        case 64: {
          FromTrustedServer = input.ReadBool();
          break;
        }
        case 74: {
          PersistentId = input.ReadString();
          break;
        }
        case 80: {
          StreamId = input.ReadInt32();
          break;
        }
        case 88: {
          LastStreamIdReceived = input.ReadInt32();
          break;
        }
        case 98: {
          Permission = input.ReadString();
          break;
        }
        case 106: {
          RegId = input.ReadString();
          break;
        }
        case 114: {
          PkgSignature = input.ReadString();
          break;
        }
        case 122: {
          ClientId = input.ReadString();
          break;
        }
        case 128: {
          DeviceUserId = input.ReadInt64();
          break;
        }
        case 136: {
          Ttl = input.ReadInt32();
          break;
        }
        case 144: {
          Sent = input.ReadInt64();
          break;
        }
        case 152: {
          Queued = input.ReadInt32();
          break;
        }
        case 160: {
          Status = input.ReadInt64();
          break;
        }
        case 170: {
          RawData = input.ReadBytes();
          break;
        }
        case 176: {
          Delay = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///*
///Included in IQ with ID 13, sent from client or server after 10 unconfirmed
///messages.
/// </summary>
public sealed partial class StreamAck : pb::IMessage<StreamAck> {
  private static readonly pb::MessageParser<StreamAck> _parser = new pb::MessageParser<StreamAck>(() => new StreamAck());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<StreamAck> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::McsPbReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StreamAck() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StreamAck(StreamAck other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StreamAck Clone() {
    return new StreamAck(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as StreamAck);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(StreamAck other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(StreamAck other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
///*
///Included in IQ sent after LoginResponse from server with ID 12.
/// </summary>
public sealed partial class SelectiveAck : pb::IMessage<SelectiveAck> {
  private static readonly pb::MessageParser<SelectiveAck> _parser = new pb::MessageParser<SelectiveAck>(() => new SelectiveAck());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SelectiveAck> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::McsPbReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SelectiveAck() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SelectiveAck(SelectiveAck other) : this() {
    id_ = other.id_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SelectiveAck Clone() {
    return new SelectiveAck(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private static readonly pb::FieldCodec<string> _repeated_id_codec
      = pb::FieldCodec.ForString(10);
  private readonly pbc::RepeatedField<string> id_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> Id {
    get { return id_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SelectiveAck);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SelectiveAck other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!id_.Equals(other.id_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= id_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    id_.WriteTo(output, _repeated_id_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += id_.CalculateSize(_repeated_id_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SelectiveAck other) {
    if (other == null) {
      return;
    }
    id_.Add(other.id_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          id_.AddEntriesFrom(input, _repeated_id_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
*/